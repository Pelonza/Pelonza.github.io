I"Ô<h1 id="problem-proper-endpoints">Problem: Proper Endpoints</h1>
<p>A logspace Turing machine that decides <span class="math inline">\(L\)</span> will keep a counter, encoded in binary, that tracks the number of <code>(</code> seen. The input is read left-to-right. When a <code>(</code> is encountered, the counter is incremented. When a <code>)</code> is encountered, the counter is decremented.</p>
<p>During the course of execution, the Turing machine rejects if the counter ever goes negative. The Turing machine also rejects if the end of the input is reached and the counter is non-zero. Otherwise, the Turing machine accepts.</p>
<h1 id="problem-problem-complements">Problem: Problem Complements</h1>
<ol type="a">
<li>The first formula is in <span class="math inline">\(\mathsf{SAT}\)</span>. For example, the formula is satisified when <span class="math inline">\(x_1\)</span>, <span class="math inline">\(x_2\)</span>, and <span class="math inline">\(x_3\)</span> are all set to true.</li>
<li>The second formula is in <span class="math inline">\(\overline{\mathsf{SAT}}\)</span>. Observe that to enable the first two clauses, <span class="math inline">\(x_1\)</span> and <span class="math inline">\(x_2\)</span> must be set to opposite truth values. However, if this is the case, then one of the last two clauses cannot be enabled.</li>
</ol>
<h1 id="problem-verifying-complements">Problem: Verifying Complements</h1>
<ol type="a">
<li><p>Since <span class="math inline">\(A\)</span> is in <span class="math inline">\(\mathsf{NP}\)</span> we know that there exists a polynomial time verifier <span class="math inline">\(V\)</span> for <span class="math inline">\(A\)</span>. However, it is not clear how to turn <span class="math inline">\(V\)</span> into a polynomial time verifier for <span class="math inline">\(\overline{A}\)</span>. If <span class="math inline">\(V(w, c)\)</span> accepts, we can safely reject because this would imply that <span class="math inline">\(w \in A\)</span> and thus <span class="math inline">\(w \notin \overline{A}\)</span>. However, if <span class="math inline">\(V(w, c)\)</span> rejects, it may not be because <span class="math inline">\(w \notin A\)</span>; it may be because the certificate is wrong. We would then need to enumerate all the possible certificates <span class="math inline">\(c\)</span> and verify that <span class="math inline">\(V\)</span> rejects all such certificates. However, enumerating such certificates requires more than polynomial time.</p></li>
<li><p>The reverse direction is similar. Answers from a verifier for instances of <span class="math inline">\(\overline{A}\)</span> do not translate into a suitably efficient algorithm for verifying instances of <span class="math inline">\(\overline{A}\)</span></p></li>
</ol>
<h1 id="problem-easy-complements">Problem: Easy Complements</h1>
<ol type="a">
<li>We show both directions of the set equality:</li>
</ol>
<div class="proof">
<p><strong>Claim</strong>: <span class="math inline">\(\mathsf{P} \subseteq \mathsf{coP}\)</span>.</p>
<p><em>Proof</em>. Let <span class="math inline">\(A \in P\)</span> and <span class="math inline">\(M\)</span> be a TM that decides <span class="math inline">\(P\)</span>. Modify <span class="math inline">\(M\)</span> to create <span class="math inline">\(M&#39;\)</span> by turning <span class="math inline">\(q_\text{accept}\)</span> into <span class="math inline">\(q_\text{reject}\)</span> and vice versa. Observe that <span class="math inline">\(L(M&#39;) = \overline{A} \in \mathsf{coP}\)</span> and <span class="math inline">\(M&#39;\)</span> runs in polynomial time because it is identical to <span class="math inline">\(M\)</span> except for its acceptance and rejection states.</p>
<p><strong>Claim</strong>: <span class="math inline">\(\mathsf{coP} \subseteq \mathsf{P}\)</span></p>
<p>Proof. The proof is identical to the previous case.</p>
</div>
<ol start="2" type="a">
<li>Applying this construction to show <span class="math inline">\(\mathsf{NP} = \mathsf{coNP}\)</span> does not work because of the asymmetric nature of nondeterminism. Only <em>some</em> branch of a nondeterministic computation must accept for the overall Turing machine to accept. However, <em>all</em> nondeterministic branches must fail for the overall Turing machine to fail. Because of this, we can‚Äôt simply flip states‚Äîwe must conceive of a way to ‚Äúcollect up‚Äù all the results of nondeterministic branches and analyze. However, nondeterminism does not allow us to share information between branches.</li>
</ol>
<h1 id="problem-complexity-soup">Problem: Complexity Soup</h1>
<p><span class="math display">\[\begin{gather*}
\mathsf{L} \subseteq \mathsf{NL} = \mathsf{coNL} \subseteq \mathsf{P} \subseteq \mathsf{NP} \subseteq \\
\mathsf{PSPACE} = \mathsf{NPSPACE} \subseteq \mathsf{EXPTIME} \subseteq \mathsf{EXPSPACE}.
\end{gather*}\]</span></p>
<p>Here is a canonical complete problem for each class:</p>
<ul>
<li><span class="math inline">\(\mathsf{L}\)</span>-complete: <span class="math inline">\(\mathsf{UPATH}\)</span>, determining whether there is a path between two points in an undirected graph.</li>
<li><span class="math inline">\(\mathsf{NL}\)</span>-complete: <span class="math inline">\(\mathsf{PATH}\)</span>, determining whether there is a path between two points in directed graph (also known as <span class="math inline">\(s\)</span>-<span class="math inline">\(t\)</span> connectivity).</li>
<li><span class="math inline">\(\mathsf{P}\)</span>-complete: <span class="math inline">\(\mathsf{UNARY{-}BOUNDED{-}HALT}\)</span>, determining whether a Turing machine halts on a given input in at most <span class="math inline">\(n\)</span> steps with <span class="math inline">\(n\)</span> given in a unary encoding.</li>
<li><span class="math inline">\(\mathsf{NP}\)</span>-complete: <span class="math inline">\(\mathsf{SAT}\)</span>, the boolean satisfiability problem.</li>
<li><span class="math inline">\(\mathsf{PSPACE}\)</span>-complete: <span class="math inline">\(\mathsf{TQBF}\)</span>, the totally quantified boolean satisfiability problem.</li>
<li><span class="math inline">\(\mathsf{EXPTIME}\)</span>-complete: <span class="math inline">\(\mathsf{BINARY{-}BOUNDED{-}HALT}\)</span>, same as <span class="math inline">\(\mathsf{UNARY{-}BOUNDED{-}HALT}\)</span> but with the input number of steps given in binary.</li>
<li><span class="math inline">\(\mathsf{EXPSPACE}\)</span>-complete: <span class="math inline">\(R_{\textsf{eq}\uparrow}\)</span>, determining whether two regular expressions involving the exponentiation operator are equal.</li>
</ul>
:ET