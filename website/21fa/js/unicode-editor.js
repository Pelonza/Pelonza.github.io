// Adapted from MDN Web Docs:
// https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
function storageAvailable(type) {
  var storage;
  try {
    storage = window[type];
    var x = '__storage_test__';
    storage.setItem(x, x);
    storage.removeItem(x);
    return true;
  }
  catch(e) {
    return e instanceof DOMException && (
      // everything except Firefox
      e.code === 22 ||
      // Firefox
      e.code === 1014 ||
      // test name field too, because code might not be present
      // everything except Firefox
      e.name === 'QuotaExceededError' ||
      // Firefox
      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
      // acknowledge QuotaExceededError only if there's something already stored
      (storage && storage.length !== 0);
  }
}

// Constructs a mapping from LaTeX commands to Unicode symbols.
function makeCommandMap() {
  let map = new Map();
  // Autogenerated from unimathsymbols.txt
  // http://milde.users.sourceforge.net/LUCR/Math/
  // {{{
map.set("\\#", "#");
map.set("\\$", "$");
map.set("\\%", "%");
map.set("\\&", "&");
map.set("\\lbrack", "[");
map.set("\\rbrack", "]");
map.set("\\sphat", "");
map.set("\\_", "_");
map.set("\\{", "{");
map.set("\\}", "}");
map.set("\\sptilde", "~");
map.set("\\cent", "¢");
map.set("\\pounds", "£");
map.set("\\yen", "¥");
map.set("\\spddot", "¨");
map.set("\\neg", "¬");
map.set("\\circledR", "®");
map.set("\\pm", "±");
map.set("\\Micro", "µ");
map.set("\\times", "×");
map.set("\\eth", "ð");
map.set("\\div", "÷");
map.set("\\imath", "ı");
map.set("\\jmath", "ȷ");
map.set("\\grave", " ̀");
map.set("\\acute", " ́");
map.set("\\hat", " ̂");
map.set("\\tilde", " ̃");
map.set("\\bar", " ̄");
map.set("\\overline", " ̅");
map.set("\\breve", " ̆");
map.set("\\dot", " ̇");
map.set("\\ddot", " ̈");
map.set("\\mathring", " ̊");
map.set("\\check", " ̌");
map.set("\\utilde", " ̰");
map.set("\\underbar", " ̱");
map.set("\\underline", " ̲");
map.set("\\not", " ̸");
map.set("\\Gamma", "Γ");
map.set("\\Delta", "Δ");
map.set("\\Theta", "Θ");
map.set("\\Lambda", "Λ");
map.set("\\Xi", "Ξ");
map.set("\\Pi", "Π");
map.set("\\Sigma", "Σ");
map.set("\\Upsilon", "Υ");
map.set("\\Phi", "Φ");
map.set("\\Psi", "Ψ");
map.set("\\Omega", "Ω");
map.set("\\alpha", "α");
map.set("\\beta", "β");
map.set("\\gamma", "γ");
map.set("\\delta", "δ");
map.set("\\varepsilon", "ε");
map.set("\\zeta", "ζ");
map.set("\\eta", "η");
map.set("\\theta", "θ");
map.set("\\iota", "ι");
map.set("\\kappa", "κ");
map.set("\\lambda", "λ");
map.set("\\mu", "μ");
map.set("\\nu", "ν");
map.set("\\xi", "ξ");
map.set("\\pi", "π");
map.set("\\rho", "ρ");
map.set("\\varsigma", "ς");
map.set("\\sigma", "σ");
map.set("\\tau", "τ");
map.set("\\upsilon", "υ");
map.set("\\varphi", "φ");
map.set("\\chi", "χ");
map.set("\\psi", "ψ");
map.set("\\omega", "ω");
map.set("\\varbeta", "ϐ");
map.set("\\vartheta", "ϑ");
map.set("\\phi", "ϕ");
map.set("\\varpi", "ϖ");
map.set("\\Qoppa", "Ϙ");
map.set("\\qoppa", "ϙ");
map.set("\\Stigma", "Ϛ");
map.set("\\stigma", "ϛ");
map.set("\\Digamma", "Ϝ");
map.set("\\digamma", "ϝ");
map.set("\\Koppa", "Ϟ");
map.set("\\koppa", "ϟ");
map.set("\\Sampi", "Ϡ");
map.set("\\sampi", "ϡ");
map.set("\\varkappa", "ϰ");
map.set("\\varrho", "ϱ");
map.set("\\epsilon", "ϵ");
map.set("\\backepsilon", "϶");
map.set("\\quad", " ");
map.set("\\|", "‖");
map.set("\\dagger", "†");
map.set("\\ddagger", "‡");
map.set("\\bullet", "•");
map.set("\\ldots", "…");
map.set("\\prime", "′");
map.set("\\second", "″");
map.set("\\third", "‴");
map.set("\\backprime", "‵");
map.set("\\cat", "⁀");
map.set("\\fourth", "⁗");
map.set("\\:", " ");
map.set("\\lvec", "x⃐");
map.set("\\vec", "x⃑");
map.set("\\LVec", "x⃖");
map.set("\\vec", "x⃗");
map.set("\\dddot", "x⃛");
map.set("\\ddddot", "x⃜");
map.set("\\overleftrightarrow", "x⃡");
map.set("\\underleftarrow", "x⃮");
map.set("\\underrightarrow", "x⃯");
map.set("\\mathbb{C}", "ℂ");
map.set("\\Euler", "ℇ");
map.set("\\mathcal{g}", "ℊ");
map.set("\\mathcal{H}", "ℋ");
map.set("\\mathfrak{H}", "ℌ");
map.set("\\mathbb{H}", "ℍ");
map.set("\\hslash", "ℏ");
map.set("\\mathcal{I}", "ℐ");
map.set("\\Im", "ℑ");
map.set("\\mathcal{L}", "ℒ");
map.set("\\ell", "ℓ");
map.set("\\mathbb{N}", "ℕ");
map.set("\\wp", "℘");
map.set("\\mathbb{P}", "ℙ");
map.set("\\mathbb{Q}", "ℚ");
map.set("\\mathcal{R}", "ℛ");
map.set("\\Re", "ℜ");
map.set("\\mathbb{R}", "ℝ");
map.set("\\mathbb{Z}", "ℤ");
map.set("\\tcohm", "Ω");
map.set("\\mho", "℧");
map.set("\\mathfrak{Z}", "ℨ");
map.set("\\Angstroem", "Å");
map.set("\\mathcal{B}", "ℬ");
map.set("\\mathfrak{C}", "ℭ");
map.set("\\mathcal{e}", "ℯ");
map.set("\\mathcal{E}", "ℰ");
map.set("\\mathcal{F}", "ℱ");
map.set("\\Finv", "Ⅎ");
map.set("\\mathcal{M}", "ℳ");
map.set("\\mathcal{o}", "ℴ");
map.set("\\aleph", "ℵ");
map.set("\\beth", "ℶ");
map.set("\\gimel", "ℷ");
map.set("\\daleth", "ℸ");
map.set("\\mathbb{\\pi}", "ℼ");
map.set("\\mathbb{\\gamma}", "ℽ");
map.set("\\mathbb{\\Gamma}", "ℾ");
map.set("\\mathbb{\\Pi}", "ℿ");
map.set("\\mathbb{\\Sigma}", "⅀");
map.set("\\Yup", "⅄");
map.set("\\CapitalDifferentialD", "ⅅ");
map.set("\\DifferentialD", "ⅆ");
map.set("\\ExponetialE", "ⅇ");
map.set("\\ComplexI", "ⅈ");
map.set("\\ComplexJ", "ⅉ");
map.set("\\invamp", "⅋");
map.set("\\leftarrow", "←");
map.set("\\uparrow", "↑");
map.set("\\rightarrow", "→");
map.set("\\downarrow", "↓");
map.set("\\leftrightarrow", "↔");
map.set("\\updownarrow", "↕");
map.set("\\nwarrow", "↖");
map.set("\\nearrow", "↗");
map.set("\\searrow", "↘");
map.set("\\swarrow", "↙");
map.set("\\nleftarrow", "↚");
map.set("\\nrightarrow", "↛");
map.set("\\twoheadleftarrow", "↞");
map.set("\\twoheadrightarrow", "↠");
map.set("\\leftarrowtail", "↢");
map.set("\\rightarrowtail", "↣");
map.set("\\mapsfrom", "↤");
map.set("\\MapsUp", "↥");
map.set("\\mapsto", "↦");
map.set("\\MapsDown", "↧");
map.set("\\hookleftarrow", "↩");
map.set("\\hookrightarrow", "↪");
map.set("\\looparrowleft", "↫");
map.set("\\looparrowright", "↬");
map.set("\\leftrightsquigarrow", "↭");
map.set("\\nleftrightarrow", "↮");
map.set("\\lightning", "↯");
map.set("\\Lsh", "↰");
map.set("\\Rsh", "↱");
map.set("\\dlsh", "↲");
map.set("\\drsh", "↳");
map.set("\\curvearrowleft", "↶");
map.set("\\curvearrowright", "↷");
map.set("\\circlearrowleft", "↺");
map.set("\\circlearrowright", "↻");
map.set("\\leftharpoonup", "↼");
map.set("\\leftharpoondown", "↽");
map.set("\\upharpoonright", "↾");
map.set("\\upharpoonleft", "↿");
map.set("\\rightharpoonup", "⇀");
map.set("\\rightharpoondown", "⇁");
map.set("\\downharpoonright", "⇂");
map.set("\\downharpoonleft", "⇃");
map.set("\\rightleftarrows", "⇄");
map.set("\\updownarrows", "⇅");
map.set("\\leftrightarrows", "⇆");
map.set("\\leftleftarrows", "⇇");
map.set("\\upuparrows", "⇈");
map.set("\\rightrightarrows", "⇉");
map.set("\\downdownarrows", "⇊");
map.set("\\leftrightharpoons", "⇋");
map.set("\\rightleftharpoons", "⇌");
map.set("\\nLeftarrow", "⇍");
map.set("\\nLeftrightarrow", "⇎");
map.set("\\nRightarrow", "⇏");
map.set("\\Leftarrow", "⇐");
map.set("\\Uparrow", "⇑");
map.set("\\Rightarrow", "⇒");
map.set("\\Downarrow", "⇓");
map.set("\\Leftrightarrow", "⇔");
map.set("\\Updownarrow", "⇕");
map.set("\\Nwarrow", "⇖");
map.set("\\Nearrow", "⇗");
map.set("\\Searrow", "⇘");
map.set("\\Swarrow", "⇙");
map.set("\\Lleftarrow", "⇚");
map.set("\\Rrightarrow", "⇛");
map.set("\\leftsquigarrow", "⇜");
map.set("\\rightsquigarrow", "⇝");
map.set("\\dashleftarrow", "⇠");
map.set("\\dashrightarrow", "⇢");
map.set("\\LeftArrowBar", "⇤");
map.set("\\RightArrowBar", "⇥");
map.set("\\downuparrows", "⇵");
map.set("\\pfun", "⇸");
map.set("\\ffun", "⇻");
map.set("\\leftarrowtriangle", "⇽");
map.set("\\rightarrowtriangle", "⇾");
map.set("\\leftrightarrowtriangle", "⇿");
map.set("\\forall", "∀");
map.set("\\complement", "∁");
map.set("\\partial", "∂");
map.set("\\exists", "∃");
map.set("\\nexists", "∄");
map.set("\\varnothing", "∅");
map.set("\\nabla", "∇");
map.set("\\in", "∈");
map.set("\\notin", "∉");
map.set("\\ni", "∋");
map.set("\\nni", "∌");
map.set("\\prod", "∏");
map.set("\\coprod", "∐");
map.set("\\sum", "∑");
map.set("\\mp", "∓");
map.set("\\dotplus", "∔");
map.set("\\slash", "∕");
map.set("\\smallsetminus", "∖");
map.set("\\ast", "∗");
map.set("\\circ", "∘");
map.set("\\bullet", "∙");
map.set("\\sqrt", "√");
map.set("\\sqrt[3]", "∛");
map.set("\\sqrt[4]", "∜");
map.set("\\propto", "∝");
map.set("\\infty", "∞");
map.set("\\rightangle", "∟");
map.set("\\angle", "∠");
map.set("\\measuredangle", "∡");
map.set("\\sphericalangle", "∢");
map.set("\\mid", "∣");
map.set("\\nmid", "∤");
map.set("\\parallel", "∥");
map.set("\\nparallel", "∦");
map.set("\\wedge", "∧");
map.set("\\vee", "∨");
map.set("\\cap", "∩");
map.set("\\cup", "∪");
map.set("\\int", "∫");
map.set("\\iint", "∬");
map.set("\\iiint", "∭");
map.set("\\oint", "∮");
map.set("\\oiint", "∯");
map.set("\\oiiint", "∰");
map.set("\\varointclockwise", "∲");
map.set("\\ointctrclockwise", "∳");
map.set("\\therefore", "∴");
map.set("\\because", "∵");
map.set("\\Proportion", "∷");
map.set("\\eqcolon", "∹");
map.set("\\sim", "∼");
map.set("\\backsim", "∽");
map.set("\\AC", "∿");
map.set("\\wr", "≀");
map.set("\\nsim", "≁");
map.set("\\eqsim", "≂");
map.set("\\simeq", "≃");
map.set("\\nsimeq", "≄");
map.set("\\cong", "≅");
map.set("\\ncong", "≇");
map.set("\\approx", "≈");
map.set("\\napprox", "≉");
map.set("\\approxeq", "≊");
map.set("\\asymp", "≍");
map.set("\\Bumpeq", "≎");
map.set("\\bumpeq", "≏");
map.set("\\doteq", "≐");
map.set("\\Doteq", "≑");
map.set("\\fallingdotseq", "≒");
map.set("\\risingdotseq", "≓");
map.set("\\coloneq", "≔");
map.set("\\eqcolon", "≕");
map.set("\\eqcirc", "≖");
map.set("\\circeq", "≗");
map.set("\\corresponds", "≙");
map.set("\\triangleq", "≜");
map.set("\\neq", "≠");
map.set("\\equiv", "≡");
map.set("\\nequiv", "≢");
map.set("\\leq", "≤");
map.set("\\geq", "≥");
map.set("\\leqq", "≦");
map.set("\\geqq", "≧");
map.set("\\lneqq", "≨");
map.set("\\gneqq", "≩");
map.set("\\ll", "≪");
map.set("\\gg", "≫");
map.set("\\between", "≬");
map.set("\\notasymp", "≭");
map.set("\\nless", "≮");
map.set("\\ngtr", "≯");
map.set("\\nleq", "≰");
map.set("\\ngeq", "≱");
map.set("\\lesssim", "≲");
map.set("\\gtrsim", "≳");
map.set("\\NotLessTilde", "≴");
map.set("\\NotGreaterTilde", "≵");
map.set("\\lessgtr", "≶");
map.set("\\gtrless", "≷");
map.set("\\NotGreaterLess", "≹");
map.set("\\prec", "≺");
map.set("\\succ", "≻");
map.set("\\preccurlyeq", "≼");
map.set("\\succcurlyeq", "≽");
map.set("\\precsim", "≾");
map.set("\\succsim", "≿");
map.set("\\nprec", "⊀");
map.set("\\nsucc", "⊁");
map.set("\\subset", "⊂");
map.set("\\supset", "⊃");
map.set("\\nsubset", "⊄");
map.set("\\nsupset", "⊅");
map.set("\\subseteq", "⊆");
map.set("\\supseteq", "⊇");
map.set("\\nsubseteq", "⊈");
map.set("\\nsupseteq", "⊉");
map.set("\\subsetneq", "⊊");
map.set("\\supsetneq", "⊋");
map.set("\\uplus", "⊎");
map.set("\\sqsubset", "⊏");
map.set("\\sqsupset", "⊐");
map.set("\\sqsubseteq", "⊑");
map.set("\\sqsupseteq", "⊒");
map.set("\\sqcap", "⊓");
map.set("\\sqcup", "⊔");
map.set("\\oplus", "⊕");
map.set("\\ominus", "⊖");
map.set("\\otimes", "⊗");
map.set("\\oslash", "⊘");
map.set("\\odot", "⊙");
map.set("\\circledcirc", "⊚");
map.set("\\circledast", "⊛");
map.set("\\circleddash", "⊝");
map.set("\\boxplus", "⊞");
map.set("\\boxminus", "⊟");
map.set("\\boxtimes", "⊠");
map.set("\\boxdot", "⊡");
map.set("\\vdash", "⊢");
map.set("\\dashv", "⊣");
map.set("\\top", "⊤");
map.set("\\bot", "⊥");
map.set("\\models", "⊧");
map.set("\\vDash", "⊨");
map.set("\\Vdash", "⊩");
map.set("\\Vvdash", "⊪");
map.set("\\VDash", "⊫");
map.set("\\nvdash", "⊬");
map.set("\\nvDash", "⊭");
map.set("\\nVdash", "⊮");
map.set("\\nVDash", "⊯");
map.set("\\vartriangleleft", "⊲");
map.set("\\vartriangleright", "⊳");
map.set("\\trianglelefteq", "⊴");
map.set("\\trianglerighteq", "⊵");
map.set("\\multimapdotbothA", "⊶");
map.set("\\multimapdotbothB", "⊷");
map.set("\\multimap", "⊸");
map.set("\\intercal", "⊺");
map.set("\\veebar", "⊻");
map.set("\\barwedge", "⊼");
map.set("\\bigwedge", "⋀");
map.set("\\bigvee", "⋁");
map.set("\\bigcap", "⋂");
map.set("\\bigcup", "⋃");
map.set("\\diamond", "⋄");
map.set("\\cdot", "⋅");
map.set("\\star", "⋆");
map.set("\\divideontimes", "⋇");
map.set("\\bowtie", "⋈");
map.set("\\ltimes", "⋉");
map.set("\\rtimes", "⋊");
map.set("\\leftthreetimes", "⋋");
map.set("\\rightthreetimes", "⋌");
map.set("\\backsimeq", "⋍");
map.set("\\curlyvee", "⋎");
map.set("\\curlywedge", "⋏");
map.set("\\Subset", "⋐");
map.set("\\Supset", "⋑");
map.set("\\Cap", "⋒");
map.set("\\Cup", "⋓");
map.set("\\pitchfork", "⋔");
map.set("\\hash", "⋕");
map.set("\\lessdot", "⋖");
map.set("\\gtrdot", "⋗");
map.set("\\lll", "⋘");
map.set("\\ggg", "⋙");
map.set("\\lesseqgtr", "⋚");
map.set("\\gtreqless", "⋛");
map.set("\\curlyeqprec", "⋞");
map.set("\\curlyeqsucc", "⋟");
map.set("\\npreceq", "⋠");
map.set("\\nsucceq", "⋡");
map.set("\\nsqsubseteq", "⋢");
map.set("\\nsqsupseteq", "⋣");
map.set("\\lnsim", "⋦");
map.set("\\gnsim", "⋧");
map.set("\\precnsim", "⋨");
map.set("\\succnsim", "⋩");
map.set("\\ntriangleleft", "⋪");
map.set("\\ntriangleright", "⋫");
map.set("\\ntrianglelefteq", "⋬");
map.set("\\ntrianglerighteq", "⋭");
map.set("\\vdots", "⋮");
map.set("\\cdots", "⋯");
map.set("\\iddots", "⋰");
map.set("\\ddots", "⋱");
map.set("\\barin", "⋶");
map.set("\\diameter", "⌀");
map.set("\\lceil", "⌈");
map.set("\\rceil", "⌉");
map.set("\\lfloor", "⌊");
map.set("\\rfloor", "⌋");
map.set("\\invneg", "⌐");
map.set("\\wasylozenge", "⌑");
map.set("\\ulcorner", "⌜");
map.set("\\urcorner", "⌝");
map.set("\\llcorner", "⌞");
map.set("\\lrcorner", "⌟");
map.set("\\frown", "⌢");
map.set("\\smile", "⌣");
map.set("\\APLinv", "⌹");
map.set("\\notslash", "⌿");
map.set("\\notbackslash", "⍀");
map.set("\\APLleftarrowbox", "⍇");
map.set("\\APLrightarrowbox", "⍈");
map.set("\\invdiameter", "⍉");
map.set("\\APLuparrowbox", "⍐");
map.set("\\APLdownarrowbox", "⍗");
map.set("\\APLcomment", "⍝");
map.set("\\APLinput", "⍞");
map.set("\\APLlog", "⍟");
map.set("\\overparen", "⏜");
map.set("\\underparen", "⏝");
map.set("\\overbrace", "⏞");
map.set("\\underbrace", "⏟");
map.set("\\bigtriangleup", "△");
map.set("\\blacktriangleup", "▴");
map.set("\\smalltriangleup", "▵");
map.set("\\RHD", "▶");
map.set("\\rhd", "▷");
map.set("\\blacktriangleright", "▸");
map.set("\\smalltriangleright", "▹");
map.set("\\bigtriangledown", "▽");
map.set("\\blacktriangledown", "▾");
map.set("\\smalltriangledown", "▿");
map.set("\\LHD", "◀");
map.set("\\lhd", "◁");
map.set("\\blacktriangleleft", "◂");
map.set("\\smalltriangleleft", "◃");
map.set("\\Diamondblack", "◆");
map.set("\\Diamond", "◇");
map.set("\\lozenge", "◊");
map.set("\\Circle", "○");
map.set("\\CIRCLE", "●");
map.set("\\LEFTcircle", "◐");
map.set("\\RIGHTcircle", "◑");
map.set("\\LEFTCIRCLE", "◖");
map.set("\\RIGHTCIRCLE", "◗");
map.set("\\boxbar", "◫");
map.set("\\square", "◻");
map.set("\\blacksquare", "◼");
map.set("\\bigstar", "★");
map.set("\\Sun", "☉");
map.set("\\Square", "☐");
map.set("\\CheckedBox", "☑");
map.set("\\XBox", "☒");
map.set("\\steaming", "☕");
map.set("\\pointright", "☞");
map.set("\\skull", "☠");
map.set("\\radiation", "☢");
map.set("\\biohazard", "☣");
map.set("\\yinyang", "☯");
map.set("\\frownie", "☹");
map.set("\\smiley", "☺");
map.set("\\blacksmiley", "☻");
map.set("\\sun", "☼");
map.set("\\rightmoon", "☽");
map.set("\\leftmoon", "☾");
map.set("\\mercury", "☿");
map.set("\\female", "♀");
map.set("\\earth", "♁");
map.set("\\male", "♂");
map.set("\\jupiter", "♃");
map.set("\\saturn", "♄");
map.set("\\uranus", "♅");
map.set("\\neptune", "♆");
map.set("\\pluto", "♇");
map.set("\\aries", "♈");
map.set("\\taurus", "♉");
map.set("\\gemini", "♊");
map.set("\\cancer", "♋");
map.set("\\leo", "♌");
map.set("\\virgo", "♍");
map.set("\\libra", "♎");
map.set("\\scorpio", "♏");
map.set("\\sagittarius", "♐");
map.set("\\capricornus", "♑");
map.set("\\aquarius", "♒");
map.set("\\pisces", "♓");
map.set("\\spadesuit", "♠");
map.set("\\heartsuit", "♡");
map.set("\\diamondsuit", "♢");
map.set("\\clubsuit", "♣");
map.set("\\varspadesuit", "♤");
map.set("\\varheartsuit", "♥");
map.set("\\vardiamondsuit", "♦");
map.set("\\varclubsuit", "♧");
map.set("\\quarternote", "♩");
map.set("\\eighthnote", "♪");
map.set("\\twonotes", "♫");
map.set("\\sixteenthnote", "♬");
map.set("\\flat", "♭");
map.set("\\natural", "♮");
map.set("\\sharp", "♯");
map.set("\\recycle", "♻");
map.set("\\anchor", "⚓");
map.set("\\swords", "⚔");
map.set("\\warning", "⚠");
map.set("\\medcirc", "⚪");
map.set("\\medbullet", "⚫");
map.set("\\pencil", "✎");
map.set("\\checkmark", "✓");
map.set("\\ballotx", "✗");
map.set("\\maltese", "✠");
map.set("\\arrowbullet", "➢");
map.set("\\perp", "⟂");
map.set("\\Lbag", "⟅");
map.set("\\Rbag", "⟆");
map.set("\\Diamonddot", "⟐");
map.set("\\multimapinv", "⟜");
map.set("\\llbracket", "⟦");
map.set("\\rrbracket", "⟧");
map.set("\\langle", "⟨");
map.set("\\rangle", "⟩");
map.set("\\lang", "⟪");
map.set("\\rang", "⟫");
map.set("\\lgroup", "⟮");
map.set("\\rgroup", "⟯");
map.set("\\longleftarrow", "⟵");
map.set("\\longrightarrow", "⟶");
map.set("\\longleftrightarrow", "⟷");
map.set("\\Longleftarrow", "⟸");
map.set("\\Longrightarrow", "⟹");
map.set("\\Longleftrightarrow", "⟺");
map.set("\\longmapsfrom", "⟻");
map.set("\\longmapsto", "⟼");
map.set("\\Longmapsfrom", "⟽");
map.set("\\Longmapsto", "⟾");
map.set("\\psur", "⤀");
map.set("\\Mapsfrom", "⤆");
map.set("\\Mapsto", "⤇");
map.set("\\UpArrowBar", "⤒");
map.set("\\DownArrowBar", "⤓");
map.set("\\pinj", "⤔");
map.set("\\finj", "⤕");
map.set("\\bij", "⤖");
map.set("\\leadsto", "⤳");
map.set("\\leftrightharpoon", "⥊");
map.set("\\rightleftharpoon", "⥋");
map.set("\\leftrightharpoonup", "⥎");
map.set("\\rightupdownharpoon", "⥏");
map.set("\\leftrightharpoondown", "⥐");
map.set("\\leftupdownharpoon", "⥑");
map.set("\\LeftVectorBar", "⥒");
map.set("\\RightVectorBar", "⥓");
map.set("\\RightUpVectorBar", "⥔");
map.set("\\RightDownVectorBar", "⥕");
map.set("\\DownLeftVectorBar", "⥖");
map.set("\\DownRightVectorBar", "⥗");
map.set("\\LeftUpVectorBar", "⥘");
map.set("\\LeftDownVectorBar", "⥙");
map.set("\\LeftTeeVector", "⥚");
map.set("\\RightTeeVector", "⥛");
map.set("\\RightUpTeeVector", "⥜");
map.set("\\RightDownTeeVector", "⥝");
map.set("\\DownLeftTeeVector", "⥞");
map.set("\\DownRightTeeVector", "⥟");
map.set("\\LeftUpTeeVector", "⥠");
map.set("\\LeftDownTeeVector", "⥡");
map.set("\\leftleftharpoons", "⥢");
map.set("\\upupharpoons", "⥣");
map.set("\\rightrightharpoons", "⥤");
map.set("\\downdownharpoons", "⥥");
map.set("\\leftbarharpoon", "⥪");
map.set("\\barleftharpoon", "⥫");
map.set("\\rightbarharpoon", "⥬");
map.set("\\barrightharpoon", "⥭");
map.set("\\updownharpoons", "⥮");
map.set("\\downupharpoons", "⥯");
map.set("\\strictfi", "⥼");
map.set("\\strictif", "⥽");
map.set("\\VERT", "⦀");
map.set("\\spot", "⦁");
map.set("\\Lparen", "⦅");
map.set("\\Rparen", "⦆");
map.set("\\limg", "⦇");
map.set("\\rimg", "⦈");
map.set("\\lblot", "⦉");
map.set("\\rblot", "⦊");
map.set("\\circledbslash", "⦸");
map.set("\\circledless", "⧀");
map.set("\\circledgtr", "⧁");
map.set("\\boxslash", "⧄");
map.set("\\boxbslash", "⧅");
map.set("\\boxast", "⧆");
map.set("\\boxcircle", "⧇");
map.set("\\boxbox", "⧈");
map.set("\\LeftTriangleBar", "⧏");
map.set("\\RightTriangleBar", "⧐");
map.set("\\multimapboth", "⧟");
map.set("\\blacklozenge", "⧫");
map.set("\\setminus", "⧵");
map.set("\\zhide", "⧹");
map.set("\\bigodot", "⨀");
map.set("\\bigoplus", "⨁");
map.set("\\bigotimes", "⨂");
map.set("\\biguplus", "⨄");
map.set("\\bigsqcap", "⨅");
map.set("\\bigsqcup", "⨆");
map.set("\\varprod", "⨉");
map.set("\\iiiint", "⨌");
map.set("\\fint", "⨏");
map.set("\\sqint", "⨖");
map.set("\\Join", "⨝");
map.set("\\zcmp", "⨟");
map.set("\\zpipe", "⨠");
map.set("\\zproject", "⨡");
map.set("\\fcmp", "⨾");
map.set("\\amalg", "⨿");
map.set("\\doublebarwedge", "⩞");
map.set("\\dsub", "⩤");
map.set("\\rsub", "⩥");
map.set("\\Coloneqq", "⩴");
map.set("\\Equal", "⩵");
map.set("\\Same", "⩶");
map.set("\\leqslant", "⩽");
map.set("\\geqslant", "⩾");
map.set("\\lessapprox", "⪅");
map.set("\\gtrapprox", "⪆");
map.set("\\lneq", "⪇");
map.set("\\gneq", "⪈");
map.set("\\lnapprox", "⪉");
map.set("\\gnapprox", "⪊");
map.set("\\lesseqqgtr", "⪋");
map.set("\\gtreqqless", "⪌");
map.set("\\eqslantless", "⪕");
map.set("\\eqslantgtr", "⪖");
map.set("\\NestedLessLess", "⪡");
map.set("\\NestedGreaterGreater", "⪢");
map.set("\\leftslice", "⪦");
map.set("\\rightslice", "⪧");
map.set("\\preceq", "⪯");
map.set("\\succeq", "⪰");
map.set("\\preceqq", "⪳");
map.set("\\succeqq", "⪴");
map.set("\\precapprox", "⪷");
map.set("\\succapprox", "⪸");
map.set("\\precnapprox", "⪹");
map.set("\\succnapprox", "⪺");
map.set("\\llcurly", "⪻");
map.set("\\ggcurly", "⪼");
map.set("\\subseteqq", "⫅");
map.set("\\supseteqq", "⫆");
map.set("\\subsetneqq", "⫋");
map.set("\\supsetneqq", "⫌");
map.set("\\Top", "⫪");
map.set("\\Bot", "⫫");
map.set("\\interleave", "⫴");
map.set("\\biginterleave", "⫼");
map.set("\\sslash", "⫽");
map.set("\\talloblong", "⫾");
map.set("\\blacksquare", "⬛");
map.set("\\square", "⬜");
map.set("\\mathbf{A}", "𝐀");
map.set("\\mathbf{B}", "𝐁");
map.set("\\mathbf{C}", "𝐂");
map.set("\\mathbf{D}", "𝐃");
map.set("\\mathbf{E}", "𝐄");
map.set("\\mathbf{F}", "𝐅");
map.set("\\mathbf{G}", "𝐆");
map.set("\\mathbf{H}", "𝐇");
map.set("\\mathbf{I}", "𝐈");
map.set("\\mathbf{J}", "𝐉");
map.set("\\mathbf{K}", "𝐊");
map.set("\\mathbf{L}", "𝐋");
map.set("\\mathbf{M}", "𝐌");
map.set("\\mathbf{N}", "𝐍");
map.set("\\mathbf{O}", "𝐎");
map.set("\\mathbf{P}", "𝐏");
map.set("\\mathbf{Q}", "𝐐");
map.set("\\mathbf{R}", "𝐑");
map.set("\\mathbf{S}", "𝐒");
map.set("\\mathbf{T}", "𝐓");
map.set("\\mathbf{U}", "𝐔");
map.set("\\mathbf{V}", "𝐕");
map.set("\\mathbf{W}", "𝐖");
map.set("\\mathbf{X}", "𝐗");
map.set("\\mathbf{Y}", "𝐘");
map.set("\\mathbf{Z}", "𝐙");
map.set("\\mathbf{a}", "𝐚");
map.set("\\mathbf{b}", "𝐛");
map.set("\\mathbf{c}", "𝐜");
map.set("\\mathbf{d}", "𝐝");
map.set("\\mathbf{e}", "𝐞");
map.set("\\mathbf{f}", "𝐟");
map.set("\\mathbf{g}", "𝐠");
map.set("\\mathbf{h}", "𝐡");
map.set("\\mathbf{i}", "𝐢");
map.set("\\mathbf{j}", "𝐣");
map.set("\\mathbf{k}", "𝐤");
map.set("\\mathbf{l}", "𝐥");
map.set("\\mathbf{m}", "𝐦");
map.set("\\mathbf{n}", "𝐧");
map.set("\\mathbf{o}", "𝐨");
map.set("\\mathbf{p}", "𝐩");
map.set("\\mathbf{q}", "𝐪");
map.set("\\mathbf{r}", "𝐫");
map.set("\\mathbf{s}", "𝐬");
map.set("\\mathbf{t}", "𝐭");
map.set("\\mathbf{u}", "𝐮");
map.set("\\mathbf{v}", "𝐯");
map.set("\\mathbf{w}", "𝐰");
map.set("\\mathbf{x}", "𝐱");
map.set("\\mathbf{y}", "𝐲");
map.set("\\mathbf{z}", "𝐳");
map.set("\\mathbfit{A}", "𝑨");
map.set("\\mathbfit{B}", "𝑩");
map.set("\\mathbfit{C}", "𝑪");
map.set("\\mathbfit{D}", "𝑫");
map.set("\\mathbfit{E}", "𝑬");
map.set("\\mathbfit{F}", "𝑭");
map.set("\\mathbfit{G}", "𝑮");
map.set("\\mathbfit{H}", "𝑯");
map.set("\\mathbfit{I}", "𝑰");
map.set("\\mathbfit{J}", "𝑱");
map.set("\\mathbfit{K}", "𝑲");
map.set("\\mathbfit{L}", "𝑳");
map.set("\\mathbfit{M}", "𝑴");
map.set("\\mathbfit{N}", "𝑵");
map.set("\\mathbfit{O}", "𝑶");
map.set("\\mathbfit{P}", "𝑷");
map.set("\\mathbfit{Q}", "𝑸");
map.set("\\mathbfit{R}", "𝑹");
map.set("\\mathbfit{S}", "𝑺");
map.set("\\mathbfit{T}", "𝑻");
map.set("\\mathbfit{U}", "𝑼");
map.set("\\mathbfit{V}", "𝑽");
map.set("\\mathbfit{W}", "𝑾");
map.set("\\mathbfit{X}", "𝑿");
map.set("\\mathbfit{Y}", "𝒀");
map.set("\\mathbfit{Z}", "𝒁");
map.set("\\mathbfit{a}", "𝒂");
map.set("\\mathbfit{b}", "𝒃");
map.set("\\mathbfit{c}", "𝒄");
map.set("\\mathbfit{d}", "𝒅");
map.set("\\mathbfit{e}", "𝒆");
map.set("\\mathbfit{f}", "𝒇");
map.set("\\mathbfit{g}", "𝒈");
map.set("\\mathbfit{h}", "𝒉");
map.set("\\mathbfit{i}", "𝒊");
map.set("\\mathbfit{j}", "𝒋");
map.set("\\mathbfit{k}", "𝒌");
map.set("\\mathbfit{l}", "𝒍");
map.set("\\mathbfit{m}", "𝒎");
map.set("\\mathbfit{n}", "𝒏");
map.set("\\mathbfit{o}", "𝒐");
map.set("\\mathbfit{p}", "𝒑");
map.set("\\mathbfit{q}", "𝒒");
map.set("\\mathbfit{r}", "𝒓");
map.set("\\mathbfit{s}", "𝒔");
map.set("\\mathbfit{t}", "𝒕");
map.set("\\mathbfit{u}", "𝒖");
map.set("\\mathbfit{v}", "𝒗");
map.set("\\mathbfit{w}", "𝒘");
map.set("\\mathbfit{x}", "𝒙");
map.set("\\mathbfit{y}", "𝒚");
map.set("\\mathbfit{z}", "𝒛");
map.set("\\mathcal{A}", "𝒜");
map.set("\\mathcal{C}", "𝒞");
map.set("\\mathcal{D}", "𝒟");
map.set("\\mathcal{G}", "𝒢");
map.set("\\mathcal{J}", "𝒥");
map.set("\\mathcal{K}", "𝒦");
map.set("\\mathcal{N}", "𝒩");
map.set("\\mathcal{O}", "𝒪");
map.set("\\mathcal{P}", "𝒫");
map.set("\\mathcal{Q}", "𝒬");
map.set("\\mathcal{S}", "𝒮");
map.set("\\mathcal{T}", "𝒯");
map.set("\\mathcal{U}", "𝒰");
map.set("\\mathcal{V}", "𝒱");
map.set("\\mathcal{W}", "𝒲");
map.set("\\mathcal{X}", "𝒳");
map.set("\\mathcal{Y}", "𝒴");
map.set("\\mathcal{Z}", "𝒵");
map.set("\\mathcal{a}", "𝒶");
map.set("\\mathcal{b}", "𝒷");
map.set("\\mathcal{c}", "𝒸");
map.set("\\mathcal{d}", "𝒹");
map.set("\\mathcal{f}", "𝒻");
map.set("\\mathcal{h}", "𝒽");
map.set("\\mathcal{i}", "𝒾");
map.set("\\mathcal{j}", "𝒿");
map.set("\\mathcal{k}", "𝓀");
map.set("\\mathcal{l}", "𝓁");
map.set("\\mathcal{m}", "𝓂");
map.set("\\mathcal{n}", "𝓃");
map.set("\\mathcal{p}", "𝓅");
map.set("\\mathcal{q}", "𝓆");
map.set("\\mathcal{r}", "𝓇");
map.set("\\mathcal{s}", "𝓈");
map.set("\\mathcal{t}", "𝓉");
map.set("\\mathcal{u}", "𝓊");
map.set("\\mathcal{v}", "𝓋");
map.set("\\mathcal{w}", "𝓌");
map.set("\\mathcal{x}", "𝓍");
map.set("\\mathcal{y}", "𝓎");
map.set("\\mathcal{z}", "𝓏");
map.set("\\mathfrak{A}", "𝔄");
map.set("\\mathfrak{B}", "𝔅");
map.set("\\mathfrak{D}", "𝔇");
map.set("\\mathfrak{E}", "𝔈");
map.set("\\mathfrak{F}", "𝔉");
map.set("\\mathfrak{G}", "𝔊");
map.set("\\mathfrak{J}", "𝔍");
map.set("\\mathfrak{K}", "𝔎");
map.set("\\mathfrak{L}", "𝔏");
map.set("\\mathfrak{M}", "𝔐");
map.set("\\mathfrak{N}", "𝔑");
map.set("\\mathfrak{O}", "𝔒");
map.set("\\mathfrak{P}", "𝔓");
map.set("\\mathfrak{Q}", "𝔔");
map.set("\\mathfrak{S}", "𝔖");
map.set("\\mathfrak{T}", "𝔗");
map.set("\\mathfrak{U}", "𝔘");
map.set("\\mathfrak{V}", "𝔙");
map.set("\\mathfrak{W}", "𝔚");
map.set("\\mathfrak{X}", "𝔛");
map.set("\\mathfrak{Y}", "𝔜");
map.set("\\mathfrak{a}", "𝔞");
map.set("\\mathfrak{b}", "𝔟");
map.set("\\mathfrak{c}", "𝔠");
map.set("\\mathfrak{d}", "𝔡");
map.set("\\mathfrak{e}", "𝔢");
map.set("\\mathfrak{f}", "𝔣");
map.set("\\mathfrak{g}", "𝔤");
map.set("\\mathfrak{h}", "𝔥");
map.set("\\mathfrak{i}", "𝔦");
map.set("\\mathfrak{j}", "𝔧");
map.set("\\mathfrak{k}", "𝔨");
map.set("\\mathfrak{l}", "𝔩");
map.set("\\mathfrak{m}", "𝔪");
map.set("\\mathfrak{n}", "𝔫");
map.set("\\mathfrak{o}", "𝔬");
map.set("\\mathfrak{p}", "𝔭");
map.set("\\mathfrak{q}", "𝔮");
map.set("\\mathfrak{r}", "𝔯");
map.set("\\mathfrak{s}", "𝔰");
map.set("\\mathfrak{t}", "𝔱");
map.set("\\mathfrak{u}", "𝔲");
map.set("\\mathfrak{v}", "𝔳");
map.set("\\mathfrak{w}", "𝔴");
map.set("\\mathfrak{x}", "𝔵");
map.set("\\mathfrak{y}", "𝔶");
map.set("\\mathfrak{z}", "𝔷");
map.set("\\mathbb{A}", "𝔸");
map.set("\\mathbb{B}", "𝔹");
map.set("\\mathbb{D}", "𝔻");
map.set("\\mathbb{E}", "𝔼");
map.set("\\mathbb{F}", "𝔽");
map.set("\\mathbb{G}", "𝔾");
map.set("\\mathbb{I}", "𝕀");
map.set("\\mathbb{J}", "𝕁");
map.set("\\mathbb{K}", "𝕂");
map.set("\\mathbb{L}", "𝕃");
map.set("\\mathbb{M}", "𝕄");
map.set("\\mathbb{O}", "𝕆");
map.set("\\mathbb{S}", "𝕊");
map.set("\\mathbb{T}", "𝕋");
map.set("\\mathbb{U}", "𝕌");
map.set("\\mathbb{V}", "𝕍");
map.set("\\mathbb{W}", "𝕎");
map.set("\\mathbb{X}", "𝕏");
map.set("\\mathbb{Y}", "𝕐");
map.set("\\mathbb{a}", "𝕒");
map.set("\\mathbb{b}", "𝕓");
map.set("\\mathbb{c}", "𝕔");
map.set("\\mathbb{d}", "𝕕");
map.set("\\mathbb{e}", "𝕖");
map.set("\\mathbb{f}", "𝕗");
map.set("\\mathbb{g}", "𝕘");
map.set("\\mathbb{h}", "𝕙");
map.set("\\mathbb{i}", "𝕚");
map.set("\\mathbb{j}", "𝕛");
map.set("\\mathbb{k}", "𝕜");
map.set("\\mathbb{l}", "𝕝");
map.set("\\mathbb{m}", "𝕞");
map.set("\\mathbb{n}", "𝕟");
map.set("\\mathbb{o}", "𝕠");
map.set("\\mathbb{p}", "𝕡");
map.set("\\mathbb{q}", "𝕢");
map.set("\\mathbb{r}", "𝕣");
map.set("\\mathbb{s}", "𝕤");
map.set("\\mathbb{t}", "𝕥");
map.set("\\mathbb{u}", "𝕦");
map.set("\\mathbb{v}", "𝕧");
map.set("\\mathbb{w}", "𝕨");
map.set("\\mathbb{x}", "𝕩");
map.set("\\mathbb{y}", "𝕪");
map.set("\\mathbb{z}", "𝕫");
map.set("\\mathsf{A}", "𝖠");
map.set("\\mathsf{B}", "𝖡");
map.set("\\mathsf{C}", "𝖢");
map.set("\\mathsf{D}", "𝖣");
map.set("\\mathsf{E}", "𝖤");
map.set("\\mathsf{F}", "𝖥");
map.set("\\mathsf{G}", "𝖦");
map.set("\\mathsf{H}", "𝖧");
map.set("\\mathsf{I}", "𝖨");
map.set("\\mathsf{J}", "𝖩");
map.set("\\mathsf{K}", "𝖪");
map.set("\\mathsf{L}", "𝖫");
map.set("\\mathsf{M}", "𝖬");
map.set("\\mathsf{N}", "𝖭");
map.set("\\mathsf{O}", "𝖮");
map.set("\\mathsf{P}", "𝖯");
map.set("\\mathsf{Q}", "𝖰");
map.set("\\mathsf{R}", "𝖱");
map.set("\\mathsf{S}", "𝖲");
map.set("\\mathsf{T}", "𝖳");
map.set("\\mathsf{U}", "𝖴");
map.set("\\mathsf{V}", "𝖵");
map.set("\\mathsf{W}", "𝖶");
map.set("\\mathsf{X}", "𝖷");
map.set("\\mathsf{Y}", "𝖸");
map.set("\\mathsf{Z}", "𝖹");
map.set("\\mathsf{a}", "𝖺");
map.set("\\mathsf{b}", "𝖻");
map.set("\\mathsf{c}", "𝖼");
map.set("\\mathsf{d}", "𝖽");
map.set("\\mathsf{e}", "𝖾");
map.set("\\mathsf{f}", "𝖿");
map.set("\\mathsf{g}", "𝗀");
map.set("\\mathsf{h}", "𝗁");
map.set("\\mathsf{i}", "𝗂");
map.set("\\mathsf{j}", "𝗃");
map.set("\\mathsf{k}", "𝗄");
map.set("\\mathsf{l}", "𝗅");
map.set("\\mathsf{m}", "𝗆");
map.set("\\mathsf{n}", "𝗇");
map.set("\\mathsf{o}", "𝗈");
map.set("\\mathsf{p}", "𝗉");
map.set("\\mathsf{q}", "𝗊");
map.set("\\mathsf{r}", "𝗋");
map.set("\\mathsf{s}", "𝗌");
map.set("\\mathsf{t}", "𝗍");
map.set("\\mathsf{u}", "𝗎");
map.set("\\mathsf{v}", "𝗏");
map.set("\\mathsf{w}", "𝗐");
map.set("\\mathsf{x}", "𝗑");
map.set("\\mathsf{y}", "𝗒");
map.set("\\mathsf{z}", "𝗓");
map.set("\\mathsfbf{A}", "𝗔");
map.set("\\mathsfbf{B}", "𝗕");
map.set("\\mathsfbf{C}", "𝗖");
map.set("\\mathsfbf{D}", "𝗗");
map.set("\\mathsfbf{E}", "𝗘");
map.set("\\mathsfbf{F}", "𝗙");
map.set("\\mathsfbf{G}", "𝗚");
map.set("\\mathsfbf{H}", "𝗛");
map.set("\\mathsfbf{I}", "𝗜");
map.set("\\mathsfbf{J}", "𝗝");
map.set("\\mathsfbf{K}", "𝗞");
map.set("\\mathsfbf{L}", "𝗟");
map.set("\\mathsfbf{M}", "𝗠");
map.set("\\mathsfbf{N}", "𝗡");
map.set("\\mathsfbf{O}", "𝗢");
map.set("\\mathsfbf{P}", "𝗣");
map.set("\\mathsfbf{Q}", "𝗤");
map.set("\\mathsfbf{R}", "𝗥");
map.set("\\mathsfbf{S}", "𝗦");
map.set("\\mathsfbf{T}", "𝗧");
map.set("\\mathsfbf{U}", "𝗨");
map.set("\\mathsfbf{V}", "𝗩");
map.set("\\mathsfbf{W}", "𝗪");
map.set("\\mathsfbf{X}", "𝗫");
map.set("\\mathsfbf{Y}", "𝗬");
map.set("\\mathsfbf{Z}", "𝗭");
map.set("\\mathsfbf{a}", "𝗮");
map.set("\\mathsfbf{b}", "𝗯");
map.set("\\mathsfbf{c}", "𝗰");
map.set("\\mathsfbf{d}", "𝗱");
map.set("\\mathsfbf{e}", "𝗲");
map.set("\\mathsfbf{f}", "𝗳");
map.set("\\mathsfbf{g}", "𝗴");
map.set("\\mathsfbf{h}", "𝗵");
map.set("\\mathsfbf{i}", "𝗶");
map.set("\\mathsfbf{j}", "𝗷");
map.set("\\mathsfbf{k}", "𝗸");
map.set("\\mathsfbf{l}", "𝗹");
map.set("\\mathsfbf{m}", "𝗺");
map.set("\\mathsfbf{n}", "𝗻");
map.set("\\mathsfbf{o}", "𝗼");
map.set("\\mathsfbf{p}", "𝗽");
map.set("\\mathsfbf{q}", "𝗾");
map.set("\\mathsfbf{r}", "𝗿");
map.set("\\mathsfbf{s}", "𝘀");
map.set("\\mathsfbf{t}", "𝘁");
map.set("\\mathsfbf{u}", "𝘂");
map.set("\\mathsfbf{v}", "𝘃");
map.set("\\mathsfbf{w}", "𝘄");
map.set("\\mathsfbf{x}", "𝘅");
map.set("\\mathsfbf{y}", "𝘆");
map.set("\\mathsfbf{z}", "𝘇");
map.set("\\mathsfit{A}", "𝘈");
map.set("\\mathsfit{B}", "𝘉");
map.set("\\mathsfit{C}", "𝘊");
map.set("\\mathsfit{D}", "𝘋");
map.set("\\mathsfit{E}", "𝘌");
map.set("\\mathsfit{F}", "𝘍");
map.set("\\mathsfit{G}", "𝘎");
map.set("\\mathsfit{H}", "𝘏");
map.set("\\mathsfit{I}", "𝘐");
map.set("\\mathsfit{J}", "𝘑");
map.set("\\mathsfit{K}", "𝘒");
map.set("\\mathsfit{L}", "𝘓");
map.set("\\mathsfit{M}", "𝘔");
map.set("\\mathsfit{N}", "𝘕");
map.set("\\mathsfit{O}", "𝘖");
map.set("\\mathsfit{P}", "𝘗");
map.set("\\mathsfit{Q}", "𝘘");
map.set("\\mathsfit{R}", "𝘙");
map.set("\\mathsfit{S}", "𝘚");
map.set("\\mathsfit{T}", "𝘛");
map.set("\\mathsfit{U}", "𝘜");
map.set("\\mathsfit{V}", "𝘝");
map.set("\\mathsfit{W}", "𝘞");
map.set("\\mathsfit{X}", "𝘟");
map.set("\\mathsfit{Y}", "𝘠");
map.set("\\mathsfit{Z}", "𝘡");
map.set("\\mathsfit{a}", "𝘢");
map.set("\\mathsfit{b}", "𝘣");
map.set("\\mathsfit{c}", "𝘤");
map.set("\\mathsfit{d}", "𝘥");
map.set("\\mathsfit{e}", "𝘦");
map.set("\\mathsfit{f}", "𝘧");
map.set("\\mathsfit{g}", "𝘨");
map.set("\\mathsfit{h}", "𝘩");
map.set("\\mathsfit{i}", "𝘪");
map.set("\\mathsfit{j}", "𝘫");
map.set("\\mathsfit{k}", "𝘬");
map.set("\\mathsfit{l}", "𝘭");
map.set("\\mathsfit{m}", "𝘮");
map.set("\\mathsfit{n}", "𝘯");
map.set("\\mathsfit{o}", "𝘰");
map.set("\\mathsfit{p}", "𝘱");
map.set("\\mathsfit{q}", "𝘲");
map.set("\\mathsfit{r}", "𝘳");
map.set("\\mathsfit{s}", "𝘴");
map.set("\\mathsfit{t}", "𝘵");
map.set("\\mathsfit{u}", "𝘶");
map.set("\\mathsfit{v}", "𝘷");
map.set("\\mathsfit{w}", "𝘸");
map.set("\\mathsfit{x}", "𝘹");
map.set("\\mathsfit{y}", "𝘺");
map.set("\\mathsfit{z}", "𝘻");
map.set("\\mathsfbfit{A}", "𝘼");
map.set("\\mathsfbfit{B}", "𝘽");
map.set("\\mathsfbfit{C}", "𝘾");
map.set("\\mathsfbfit{D}", "𝘿");
map.set("\\mathsfbfit{E}", "𝙀");
map.set("\\mathsfbfit{F}", "𝙁");
map.set("\\mathsfbfit{G}", "𝙂");
map.set("\\mathsfbfit{H}", "𝙃");
map.set("\\mathsfbfit{I}", "𝙄");
map.set("\\mathsfbfit{J}", "𝙅");
map.set("\\mathsfbfit{K}", "𝙆");
map.set("\\mathsfbfit{L}", "𝙇");
map.set("\\mathsfbfit{M}", "𝙈");
map.set("\\mathsfbfit{N}", "𝙉");
map.set("\\mathsfbfit{O}", "𝙊");
map.set("\\mathsfbfit{P}", "𝙋");
map.set("\\mathsfbfit{Q}", "𝙌");
map.set("\\mathsfbfit{R}", "𝙍");
map.set("\\mathsfbfit{S}", "𝙎");
map.set("\\mathsfbfit{T}", "𝙏");
map.set("\\mathsfbfit{U}", "𝙐");
map.set("\\mathsfbfit{V}", "𝙑");
map.set("\\mathsfbfit{W}", "𝙒");
map.set("\\mathsfbfit{X}", "𝙓");
map.set("\\mathsfbfit{Y}", "𝙔");
map.set("\\mathsfbfit{Z}", "𝙕");
map.set("\\mathsfbfit{a}", "𝙖");
map.set("\\mathsfbfit{b}", "𝙗");
map.set("\\mathsfbfit{c}", "𝙘");
map.set("\\mathsfbfit{d}", "𝙙");
map.set("\\mathsfbfit{e}", "𝙚");
map.set("\\mathsfbfit{f}", "𝙛");
map.set("\\mathsfbfit{g}", "𝙜");
map.set("\\mathsfbfit{h}", "𝙝");
map.set("\\mathsfbfit{i}", "𝙞");
map.set("\\mathsfbfit{j}", "𝙟");
map.set("\\mathsfbfit{k}", "𝙠");
map.set("\\mathsfbfit{l}", "𝙡");
map.set("\\mathsfbfit{m}", "𝙢");
map.set("\\mathsfbfit{n}", "𝙣");
map.set("\\mathsfbfit{o}", "𝙤");
map.set("\\mathsfbfit{p}", "𝙥");
map.set("\\mathsfbfit{q}", "𝙦");
map.set("\\mathsfbfit{r}", "𝙧");
map.set("\\mathsfbfit{s}", "𝙨");
map.set("\\mathsfbfit{t}", "𝙩");
map.set("\\mathsfbfit{u}", "𝙪");
map.set("\\mathsfbfit{v}", "𝙫");
map.set("\\mathsfbfit{w}", "𝙬");
map.set("\\mathsfbfit{x}", "𝙭");
map.set("\\mathsfbfit{y}", "𝙮");
map.set("\\mathsfbfit{z}", "𝙯");
map.set("\\mathtt{A}", "𝙰");
map.set("\\mathtt{B}", "𝙱");
map.set("\\mathtt{C}", "𝙲");
map.set("\\mathtt{D}", "𝙳");
map.set("\\mathtt{E}", "𝙴");
map.set("\\mathtt{F}", "𝙵");
map.set("\\mathtt{G}", "𝙶");
map.set("\\mathtt{H}", "𝙷");
map.set("\\mathtt{I}", "𝙸");
map.set("\\mathtt{J}", "𝙹");
map.set("\\mathtt{K}", "𝙺");
map.set("\\mathtt{L}", "𝙻");
map.set("\\mathtt{M}", "𝙼");
map.set("\\mathtt{N}", "𝙽");
map.set("\\mathtt{O}", "𝙾");
map.set("\\mathtt{P}", "𝙿");
map.set("\\mathtt{Q}", "𝚀");
map.set("\\mathtt{R}", "𝚁");
map.set("\\mathtt{S}", "𝚂");
map.set("\\mathtt{T}", "𝚃");
map.set("\\mathtt{U}", "𝚄");
map.set("\\mathtt{V}", "𝚅");
map.set("\\mathtt{W}", "𝚆");
map.set("\\mathtt{X}", "𝚇");
map.set("\\mathtt{Y}", "𝚈");
map.set("\\mathtt{Z}", "𝚉");
map.set("\\mathtt{a}", "𝚊");
map.set("\\mathtt{b}", "𝚋");
map.set("\\mathtt{c}", "𝚌");
map.set("\\mathtt{d}", "𝚍");
map.set("\\mathtt{e}", "𝚎");
map.set("\\mathtt{f}", "𝚏");
map.set("\\mathtt{g}", "𝚐");
map.set("\\mathtt{h}", "𝚑");
map.set("\\mathtt{i}", "𝚒");
map.set("\\mathtt{j}", "𝚓");
map.set("\\mathtt{k}", "𝚔");
map.set("\\mathtt{l}", "𝚕");
map.set("\\mathtt{m}", "𝚖");
map.set("\\mathtt{n}", "𝚗");
map.set("\\mathtt{o}", "𝚘");
map.set("\\mathtt{p}", "𝚙");
map.set("\\mathtt{q}", "𝚚");
map.set("\\mathtt{r}", "𝚛");
map.set("\\mathtt{s}", "𝚜");
map.set("\\mathtt{t}", "𝚝");
map.set("\\mathtt{u}", "𝚞");
map.set("\\mathtt{v}", "𝚟");
map.set("\\mathtt{w}", "𝚠");
map.set("\\mathtt{x}", "𝚡");
map.set("\\mathtt{y}", "𝚢");
map.set("\\mathtt{z}", "𝚣");
map.set("\\imath", "𝚤");
map.set("\\jmath", "𝚥");
map.set("\\mathbf{\\Gamma}", "𝚪");
map.set("\\mathbf{\\Delta}", "𝚫");
map.set("\\mathbf{\\Theta}", "𝚯");
map.set("\\mathbf{\\Lambda}", "𝚲");
map.set("\\mathbf{\\Xi}", "𝚵");
map.set("\\mathbf{\\Pi}", "𝚷");
map.set("\\mathbf{\\Sigma}", "𝚺");
map.set("\\mathbf{\\Upsilon}", "𝚼");
map.set("\\mathbf{\\Phi}", "𝚽");
map.set("\\mathbf{\\Psi}", "𝚿");
map.set("\\mathbf{\\Omega}", "𝛀");
map.set("\\mathbf{\\alpha}", "𝛂");
map.set("\\mathbf{\\beta}", "𝛃");
map.set("\\mathbf{\\gamma}", "𝛄");
map.set("\\mathbf{\\delta}", "𝛅");
map.set("\\mathbf{\\varepsilon}", "𝛆");
map.set("\\mathbf{\\zeta}", "𝛇");
map.set("\\mathbf{\\eta}", "𝛈");
map.set("\\mathbf{\\theta}", "𝛉");
map.set("\\mathbf{\\iota}", "𝛊");
map.set("\\mathbf{\\kappa}", "𝛋");
map.set("\\mathbf{\\lambda}", "𝛌");
map.set("\\mathbf{\\mu}", "𝛍");
map.set("\\mathbf{\\nu}", "𝛎");
map.set("\\mathbf{\\xi}", "𝛏");
map.set("\\mathbf{\\pi}", "𝛑");
map.set("\\mathbf{\\rho}", "𝛒");
map.set("\\mathbf{\\varsigma}", "𝛓");
map.set("\\mathbf{\\sigma}", "𝛔");
map.set("\\mathbf{\\tau}", "𝛕");
map.set("\\mathbf{\\upsilon}", "𝛖");
map.set("\\mathbf{\\varphi}", "𝛗");
map.set("\\mathbf{\\chi}", "𝛘");
map.set("\\mathbf{\\psi}", "𝛙");
map.set("\\mathbf{\\omega}", "𝛚");
map.set("\\mathbf{\\epsilon}", "𝛜");
map.set("\\mathbf{\\vartheta}", "𝛝");
map.set("\\mathbf{\\phi}", "𝛟");
map.set("\\mathbf{\\varrho}", "𝛠");
map.set("\\mathbf{\\varpi}", "𝛡");
map.set("\\Gamma", "𝛤");
map.set("\\Delta", "𝛥");
map.set("\\Theta", "𝛩");
map.set("\\Lambda", "𝛬");
map.set("\\Xi", "𝛯");
map.set("\\Pi", "𝛱");
map.set("\\Sigma", "𝛴");
map.set("\\Upsilon", "𝛶");
map.set("\\Phi", "𝛷");
map.set("\\Psi", "𝛹");
map.set("\\Omega", "𝛺");
map.set("\\alpha", "𝛼");
map.set("\\beta", "𝛽");
map.set("\\gamma", "𝛾");
map.set("\\delta", "𝛿");
map.set("\\varepsilon", "𝜀");
map.set("\\zeta", "𝜁");
map.set("\\eta", "𝜂");
map.set("\\theta", "𝜃");
map.set("\\iota", "𝜄");
map.set("\\kappa", "𝜅");
map.set("\\lambda", "𝜆");
map.set("\\mu", "𝜇");
map.set("\\nu", "𝜈");
map.set("\\xi", "𝜉");
map.set("\\pi", "𝜋");
map.set("\\rho", "𝜌");
map.set("\\varsigma", "𝜍");
map.set("\\sigma", "𝜎");
map.set("\\tau", "𝜏");
map.set("\\upsilon", "𝜐");
map.set("\\varphi", "𝜑");
map.set("\\chi", "𝜒");
map.set("\\psi", "𝜓");
map.set("\\omega", "𝜔");
map.set("\\partial", "𝜕");
map.set("\\epsilon", "𝜖");
map.set("\\vartheta", "𝜗");
map.set("\\varkappa", "𝜘");
map.set("\\phi", "𝜙");
map.set("\\varrho", "𝜚");
map.set("\\varpi", "𝜛");
map.set("\\mathbfit{\\Gamma}", "𝜞");
map.set("\\mathbfit{\\Delta}", "𝜟");
map.set("\\mathbfit{\\Theta}", "𝜣");
map.set("\\mathbfit{\\Lambda}", "𝜦");
map.set("\\mathbfit{\\Xi}", "𝜩");
map.set("\\mathbfit{\\Pi}", "𝜫");
map.set("\\mathbfit{\\Sigma}", "𝜮");
map.set("\\mathbfit{\\Upsilon}", "𝜰");
map.set("\\mathbfit{\\Phi}", "𝜱");
map.set("\\mathbfit{\\Psi}", "𝜳");
map.set("\\mathbfit{\\Omega}", "𝜴");
map.set("\\mathbfit{\\alpha}", "𝜶");
map.set("\\mathbfit{\\beta}", "𝜷");
map.set("\\mathbfit{\\gamma}", "𝜸");
map.set("\\mathbfit{\\delta}", "𝜹");
map.set("\\mathbfit{\\varepsilon}", "𝜺");
map.set("\\mathbfit{\\zeta}", "𝜻");
map.set("\\mathbfit{\\eta}", "𝜼");
map.set("\\mathbfit{\\theta}", "𝜽");
map.set("\\mathbfit{\\iota}", "𝜾");
map.set("\\mathbfit{\\kappa}", "𝜿");
map.set("\\mathbfit{\\lambda}", "𝝀");
map.set("\\mathbfit{\\mu}", "𝝁");
map.set("\\mathbfit{\\nu}", "𝝂");
map.set("\\mathbfit{\\xi}", "𝝃");
map.set("\\mathbfit{\\pi}", "𝝅");
map.set("\\mathbfit{\\rho}", "𝝆");
map.set("\\mathbfit{\\varsigma}", "𝝇");
map.set("\\mathbfit{\\sigma}", "𝝈");
map.set("\\mathbfit{\\tau}", "𝝉");
map.set("\\mathbfit{\\upsilon}", "𝝊");
map.set("\\mathbfit{\\varphi}", "𝝋");
map.set("\\mathbfit{\\chi}", "𝝌");
map.set("\\mathbfit{\\psi}", "𝝍");
map.set("\\mathbfit{\\omega}", "𝝎");
map.set("\\mathbfit{\\epsilon}", "𝝐");
map.set("\\mathbfit{\\vartheta}", "𝝑");
map.set("\\mathbfit{\\phi}", "𝝓");
map.set("\\mathbfit{\\varrho}", "𝝔");
map.set("\\mathbfit{\\varpi}", "𝝕");
map.set("\\mathsfbf{\\Gamma}", "𝝘");
map.set("\\mathsfbf{\\Delta}", "𝝙");
map.set("\\mathsfbf{\\Theta}", "𝝝");
map.set("\\mathsfbf{\\Lambda}", "𝝠");
map.set("\\mathsfbf{\\Xi}", "𝝣");
map.set("\\mathsfbf{\\Pi}", "𝝥");
map.set("\\mathsfbf{\\Sigma}", "𝝨");
map.set("\\mathsfbf{\\Upsilon}", "𝝪");
map.set("\\mathsfbf{\\Phi}", "𝝫");
map.set("\\mathsfbf{\\Psi}", "𝝭");
map.set("\\mathsfbf{\\Omega}", "𝝮");
map.set("\\mathsfbf{\\alpha}", "𝝰");
map.set("\\mathsfbf{\\beta}", "𝝱");
map.set("\\mathsfbf{\\gamma}", "𝝲");
map.set("\\mathsfbf{\\delta}", "𝝳");
map.set("\\mathsfbf{\\varepsilon}", "𝝴");
map.set("\\mathsfbf{\\zeta}", "𝝵");
map.set("\\mathsfbf{\\eta}", "𝝶");
map.set("\\mathsfbf{\\theta}", "𝝷");
map.set("\\mathsfbf{\\iota}", "𝝸");
map.set("\\mathsfbf{\\kappa}", "𝝹");
map.set("\\mathsfbf{\\lambda}", "𝝺");
map.set("\\mathsfbf{\\mu}", "𝝻");
map.set("\\mathsfbf{\\nu}", "𝝼");
map.set("\\mathsfbf{\\xi}", "𝝽");
map.set("\\mathsfbf{\\pi}", "𝝿");
map.set("\\mathsfbf{\\rho}", "𝞀");
map.set("\\mathsfbf{\\varsigma}", "𝞁");
map.set("\\mathsfbf{\\sigma}", "𝞂");
map.set("\\mathsfbf{\\tau}", "𝞃");
map.set("\\mathsfbf{\\upsilon}", "𝞄");
map.set("\\mathsfbf{\\varphi}", "𝞅");
map.set("\\mathsfbf{\\chi}", "𝞆");
map.set("\\mathsfbf{\\psi}", "𝞇");
map.set("\\mathsfbf{\\omega}", "𝞈");
map.set("\\mathsfbf{\\epsilon}", "𝞊");
map.set("\\mathsfbf{\\vartheta}", "𝞋");
map.set("\\mathsfbf{\\phi}", "𝞍");
map.set("\\mathsfbf{\\varrho}", "𝞎");
map.set("\\mathsfbf{\\varpi}", "𝞏");
map.set("\\mathsfbfit{\\Gamma}", "𝞒");
map.set("\\mathsfbfit{\\Delta}", "𝞓");
map.set("\\mathsfbfit{\\Theta}", "𝞗");
map.set("\\mathsfbfit{\\Lambda}", "𝞚");
map.set("\\mathsfbfit{\\Xi}", "𝞝");
map.set("\\mathsfbfit{\\Pi}", "𝞟");
map.set("\\mathsfbfit{\\Sigma}", "𝞢");
map.set("\\mathsfbfit{\\Upsilon}", "𝞤");
map.set("\\mathsfbfit{\\Phi}", "𝞥");
map.set("\\mathsfbfit{\\Psi}", "𝞧");
map.set("\\mathsfbfit{\\Omega}", "𝞨");
map.set("\\mathsfbfit{\\alpha}", "𝞪");
map.set("\\mathsfbfit{\\beta}", "𝞫");
map.set("\\mathsfbfit{\\gamma}", "𝞬");
map.set("\\mathsfbfit{\\delta}", "𝞭");
map.set("\\mathsfbfit{\\varepsilon}", "𝞮");
map.set("\\mathsfbfit{\\zeta}", "𝞯");
map.set("\\mathsfbfit{\\eta}", "𝞰");
map.set("\\mathsfbfit{\\theta}", "𝞱");
map.set("\\mathsfbfit{\\iota}", "𝞲");
map.set("\\mathsfbfit{\\kappa}", "𝞳");
map.set("\\mathsfbfit{\\lambda}", "𝞴");
map.set("\\mathsfbfit{\\mu}", "𝞵");
map.set("\\mathsfbfit{\\nu}", "𝞶");
map.set("\\mathsfbfit{\\xi}", "𝞷");
map.set("\\mathsfbfit{\\pi}", "𝞹");
map.set("\\mathsfbfit{\\rho}", "𝞺");
map.set("\\mathsfbfit{\\varsigma}", "𝞻");
map.set("\\mathsfbfit{\\sigma}", "𝞼");
map.set("\\mathsfbfit{\\tau}", "𝞽");
map.set("\\mathsfbfit{\\upsilon}", "𝞾");
map.set("\\mathsfbfit{\\varphi}", "𝞿");
map.set("\\mathsfbfit{\\chi}", "𝟀");
map.set("\\mathsfbfit{\\psi}", "𝟁");
map.set("\\mathsfbfit{\\omega}", "𝟂");
map.set("\\mathsfbfit{\\epsilon}", "𝟄");
map.set("\\mathsfbfit{\\vartheta}", "𝟅");
map.set("\\mathsfbfit{\\phi}", "𝟇");
map.set("\\mathsfbfit{\\varrho}", "𝟈");
map.set("\\mathsfbfit{\\varpi}", "𝟉");
map.set("\\mathbf{0}", "𝟎");
map.set("\\mathbf{1}", "𝟏");
map.set("\\mathbf{2}", "𝟐");
map.set("\\mathbf{3}", "𝟑");
map.set("\\mathbf{4}", "𝟒");
map.set("\\mathbf{5}", "𝟓");
map.set("\\mathbf{6}", "𝟔");
map.set("\\mathbf{7}", "𝟕");
map.set("\\mathbf{8}", "𝟖");
map.set("\\mathbf{9}", "𝟗");
map.set("\\mathbb{0}", "𝟘");
map.set("\\mathbb{1}", "𝟙");
map.set("\\mathbb{2}", "𝟚");
map.set("\\mathbb{3}", "𝟛");
map.set("\\mathbb{4}", "𝟜");
map.set("\\mathbb{5}", "𝟝");
map.set("\\mathbb{6}", "𝟞");
map.set("\\mathbb{7}", "𝟟");
map.set("\\mathbb{8}", "𝟠");
map.set("\\mathbb{9}", "𝟡");
map.set("\\mathsf{0}", "𝟢");
map.set("\\mathsf{1}", "𝟣");
map.set("\\mathsf{2}", "𝟤");
map.set("\\mathsf{3}", "𝟥");
map.set("\\mathsf{4}", "𝟦");
map.set("\\mathsf{5}", "𝟧");
map.set("\\mathsf{6}", "𝟨");
map.set("\\mathsf{7}", "𝟩");
map.set("\\mathsf{8}", "𝟪");
map.set("\\mathsf{9}", "𝟫");
map.set("\\mathsfbf{0}", "𝟬");
map.set("\\mathsfbf{1}", "𝟭");
map.set("\\mathsfbf{2}", "𝟮");
map.set("\\mathsfbf{3}", "𝟯");
map.set("\\mathsfbf{4}", "𝟰");
map.set("\\mathsfbf{5}", "𝟱");
map.set("\\mathsfbf{6}", "𝟲");
map.set("\\mathsfbf{7}", "𝟳");
map.set("\\mathsfbf{8}", "𝟴");
map.set("\\mathsfbf{9}", "𝟵");
map.set("\\mathtt{0}", "𝟶");
map.set("\\mathtt{1}", "𝟷");
map.set("\\mathtt{2}", "𝟸");
map.set("\\mathtt{3}", "𝟹");
map.set("\\mathtt{4}", "𝟺");
map.set("\\mathtt{5}", "𝟻");
map.set("\\mathtt{6}", "𝟼");
map.set("\\mathtt{7}", "𝟽");
map.set("\\mathtt{8}", "𝟾");
map.set("\\mathtt{9}", "𝟿");
  // }}}
  return map;
}

window.onload = function() {
  const editor = document.getElementById('unicode-editor');
  const cmds = makeCommandMap();

  const storage = storageAvailable('localStorage') ? window.localStorage : undefined;
  const STORAGE_KEY = "unicode-editor";

  editor.addEventListener('input', function(e) {
    var contents = e.target.value;
    var tokens = contents.split(/(\\[A-Za-z{}]*\s)/g);
    for (var i = 0; i < tokens.length; i++) {
      cmd = tokens[i].trim();
      if (cmds.has(cmd)) {
        tokens[i] = cmds.get(cmd) + " ";
      }
    }
    var updatedContents = tokens.join("");
    editor.value = updatedContents;
    if (storage != undefined) {
      storage.setItem(STORAGE_KEY, updatedContents);
    }
  });

  if (storage != undefined) {
    editor.value = storage.getItem(STORAGE_KEY);
  }
};
