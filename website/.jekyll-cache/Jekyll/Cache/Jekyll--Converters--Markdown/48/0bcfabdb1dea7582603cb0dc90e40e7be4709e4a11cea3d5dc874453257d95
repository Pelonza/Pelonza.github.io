I"V<p><span class="math display">\[
\newcommand{\desc}[1]{\langle #1 \rangle}
\]</span></p>
<p>In this problem, we’ll walk through and complete a proof of Rice’s Theorem which was introduced in the reading.</p>
<p>Let <span class="math inline">\(P\)</span> be a language whose strings are Turing machine descriptions that satisfy an arbitrary predicate <span class="math inline">\(f\)</span>, <em>i.e.</em>,</p>
<p><span class="math display">\[
P = \{\, \desc{M} \mid f(M) \,\}
\]</span></p>
<p>(<em>Note</em>: throughout this lab, <span class="math inline">\(P\)</span> will refer to this Turing machine, not the complexity class <span class="math inline">\(P\)</span>!)</p>
<p>where <span class="math inline">\(f\)</span> is a proposition ranging over Turing machine descriptions. For example, the following are propositions over a Turing machine, call it <span class="math inline">\(M\)</span>:</p>
<ul>
<li><span class="math inline">\(L(M)\)</span> is finite.</li>
<li><span class="math inline">\(M\)</span> writes a <code>$</code> on its tape for some input.</li>
</ul>
<p>Rice’s Theorem demands two properties are true about <span class="math inline">\(P\)</span>.</p>
<ul>
<li><span class="math inline">\(P\)</span> is non-trivial: there exists <span class="math inline">\(M_1\)</span> and <span class="math inline">\(M_2\)</span> such that <span class="math inline">\(\desc{M_1} \in P\)</span> and <span class="math inline">\(\desc{M_2} \notin P\)</span>.</li>
<li><span class="math inline">\(P\)</span> is a language property: if <span class="math inline">\(L(M_1) = L(M_2)\)</span> then <span class="math inline">\(\desc{M_1} \in P \Leftrightarrow \desc{M_2} \in P\)</span>.</li>
</ul>
<h1 id="problem-1-language-property-example">Problem 1: Language Property Example</h1>
<p>Let’s first check that we understand what we mean by “language property”.</p>
<p>Let:</p>
<p><span class="math display">\[
P = \{\, \desc{M} \mid \text{$M$ writes a `\$&#39; on its tape for some input.} \,\}.
\]</span></p>
<p>With your group, ultimately discuss and answer why <span class="math inline">\(P\)</span> <em>does not</em> fulfill the definition of language property. Make sure to appeal to the above definition of language property in your argument.</p>
<h1 id="problem-2-core-reduction">Problem 2: Core Reduction</h1>
<p>Now let’s proceed with the core of the proof of Rice’s theorem. First we’ll complete the core reduction under a set of assumptions about our property <span class="math inline">\(P\)</span>. We’ll then discuss after the fact why these assumptions are sound given the constraints of Rice’s theorem.</p>
<p>Assume the following:</p>
<ul>
<li>There exists a TM <span class="math inline">\(T\)</span> such that <span class="math inline">\(\desc{T} \in P\)</span>.</li>
<li>Define the TM that rejects all strings to be <span class="math inline">\(T_{\emptyset}\)</span>. Assume that <span class="math inline">\(\desc{T_{\emptyset}} \notin P\)</span>.</li>
</ul>
<p>Use <span class="math inline">\(T\)</span> to construct a mapping reduction from <span class="math inline">\(A_\mathsf{TM}\)</span> to <span class="math inline">\(P\)</span>. Keep in mind the following insights while constructing your mapping reduction:</p>
<ul>
<li>Your mapping construction, when given an input to <span class="math inline">\(A_\mathsf{TM}\)</span> of the form <span class="math inline">\(\desc{M, w}\)</span> should produce a TM <span class="math inline">\(\desc{M&#39;}\)</span> with the property that <span class="math inline">\(M\)</span> accepts <span class="math inline">\(w\)</span> iff <span class="math inline">\(\desc{M&#39;} \in P\)</span>.</li>
<li>Note that we have asserted that (a) a machine <span class="math inline">\(T\)</span> exists that is in <span class="math inline">\(P\)</span> and (b) the machine that rejects all strings <span class="math inline">\(T_\emptyset\)</span> is not in <span class="math inline">\(P\)</span>. Use these as the targets for your mapping function as described in “Undecidable Proof Strategies” handout.</li>
</ul>
<p>Once you have a candidate reduction, check your answer with the course staff.</p>
<h1 id="problem-3-the-first-constraint">Problem 3: The First Constraint</h1>
<p>With the reduction completed, we need to show where the two constraints came from. Let’s briefly talk about the first constraint.</p>
<p>In a few sentences, explain why the constraints of Rice’s Theorem on <span class="math inline">\(P\)</span> imply that there exists a TM <span class="math inline">\(T\)</span> such that <span class="math inline">\(\desc{T} \in P\)</span>.</p>
<h1 id="problem-4-the-final-fix-up">Problem 4: The Final Fix-Up</h1>
<p>The second constraint is really an assumption “without loss of generality”. In other words, even if <span class="math inline">\(T_\emptyset \in P\)</span>, we can still complete the proof with a little bit inconsequential fix-up to our proof. Note that we can’t simply work with <span class="math inline">\(T_\emptyset\)</span> directly in this case because our mapping reduction will fail in a style similar to <span class="math inline">\(E_{TM}\)</span>. We instead need to do something else.</p>
<p>It turns out that the fix-up is to consider instead the complement of <span class="math inline">\(P\)</span>:</p>
<p><span class="math display">\[
\overline{P} = \{\, \desc{M} \mid \desc{M} \notin P \,\}.
\]</span></p>
<p>The reduction above then holds, but shows that <span class="math inline">\(A_\mathsf{TM} \leq_m \overline{P}\)</span> rather than <span class="math inline">\(P\)</span>.</p>
<p>Determine how a decider for <span class="math inline">\(\overline{P}\)</span> could be used to create a decider for <span class="math inline">\(P\)</span>, allowing us to conclude that <span class="math inline">\(A_\mathsf{TM} \leq \overline{P}\)</span> as well. Check your reasoning for this and the previous part with the course staff when you are done.</p>
:ET