I"€<h1 id="problem-1">Problem 1: â˜ </h1>
<p>Formally define a <em>DFA with death</em> <span class="math inline">\(D = (Q, \Sigma^*, q_0, \delta, F)\)</span> as a DFA except that the type of the transition function is:</p>
<p><span class="math display">\[
\delta : Q \times Î£ \rightarrow Q \cup \{\, â˜  \,\}.
\]</span></p>
<p>We assume that <span class="math inline">\(â˜  \notin Q\)</span>. Intuitively, if a state-character pair transitions to â˜  (LaTeX: <code>\skull</code>, Unicode: â˜ ), then no additional input is consumed and the machine rejects the input string.</p>
<ol type="1">
<li><p>Recall that <span class="math inline">\(M\)</span> accepts <span class="math inline">\(w\)</span> if there exists a sequence of states <span class="math inline">\(r_0, r_1, \ldots, r_n \in Q\)</span> such that:</p>
<ul>
<li><span class="math inline">\(r_0 = q_0\)</span>,</li>
<li><span class="math inline">\(\delta(r_i, w_{i+1}) = r_{i+1}\)</span> for <span class="math inline">\(i = 0, \ldots, n-1\)</span>, and</li>
<li><span class="math inline">\(r_n in F\)</span>.</li>
</ul>
<p>Does the definition of acceptance need to change for a DFA with death? If so, give a modified definition, explaining what changes you made in a sentence or two. If not, explain why in a sentence or two.</p></li>
<li><p>Prove that a DFA with death is equivalent to a DFA. Make sure to prove both sides of this equivalence!</p></li>
</ol>
<h1 id="problem-2-embedding">Problem 2: Embedding</h1>
<p>Define the embedding of language <span class="math inline">\(L_2\)</span> into <span class="math inline">\(L_1\)</span>, written <span class="math inline">\(L_1 \curvearrowleft L_2\)</span> (LaTeX: <code>\curvearrowleft</code>, Unicode: â†¶) as:</p>
<p><span class="math display">\[
L_1 \curvearrowleft L_2 = \{\, x_1 y x_2 \mid x_1 x_2 \in L_1, y \in L_2 \,\}.
\]</span></p>
<p>(<em>Note</em>: it is <span class="math inline">\(x_1 x_2\)</span>, <em>i.e.</em>, their concatenation, that is in <span class="math inline">\(L_1\)</span>. <span class="math inline">\(x_1\)</span> and <span class="math inline">\(x_2\)</span>, individually, may not be in <span class="math inline">\(L_1\)</span>.)</p>
<p>Prove that the language embedding operator (â†¶) is closed under the regular languages.</p>
<p>(<em>Hint 1</em>: work through a number of examples of finite automata, combining them with the (â†¶) operator and developing an intuitive sense of how to compute the embedding.)</p>
<p>(<em>Hint 2</em>: to implement this construction elegantly, you will need to use nondeterminism heavily! Also, donâ€™t be afraid to replicate your assumed machines for <span class="math inline">\(L_1\)</span> and <span class="math inline">\(L_2\)</span> repeatedly.)</p>
<p>(<em>Hint 3</em>: regarding formalizing your construction, it is likely fairly complicated! I recommend developing a systematic notation for talking about the various states and transitions of your final machine. For example, if you want to denote a copy of a machine, say <span class="math inline">\(N\)</span>, that is associated with some state, call it <span class="math inline">\(q\)</span>, you might call the copy <span class="math inline">\(N_q\)</span>.)</p>
:ET