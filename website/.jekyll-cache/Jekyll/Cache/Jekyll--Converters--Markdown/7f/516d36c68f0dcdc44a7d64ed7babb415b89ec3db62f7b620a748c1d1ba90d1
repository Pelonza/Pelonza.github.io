I"X<h1 id="problem-1-sugar">Problem 1: Sugar</h1>
<p>Definition 1.52 of Sipser gives the formal definition of a regular expression. You might notice that this includes a minimal set of operators compared to a real-world regular expression language. The set of additional operators found in these real-world languages are not essential; indeed, with a little bit of thought, we can use the minimal set to emulate these extended operators.</p>
<p>For each of the given extended regular expression operators, give an equivalent regular expression using the operators defined in Sipser.</p>
<ol type="1">
<li><span class="math inline">\(R+\)</span>: matches one or more occurrences of <span class="math inline">\(R\)</span>.</li>
<li><span class="math inline">\(R?\)</span>: matches zero or one occurrences of <span class="math inline">\(R\)</span>.</li>
<li><span class="math inline">\([c_1 \cdots c_k]\)</span>: matches exactly one occurrence of any of the characters <span class="math inline">\(c_1\)</span>, â€¦, <span class="math inline">\(c_k\)</span>.</li>
<li><span class="math inline">\(n\{R\}\)</span>: matches <span class="math inline">\(n\)</span> repetitions of <span class="math inline">\(R\)</span>.</li>
<li><span class="math inline">\(R\$\)</span>: matches any string that ends with <span class="math inline">\(R\)</span>.</li>
</ol>
<h1 id="problem-2-awkward">Problem 2: Awkward</h1>
<p>(<em>Adapted from Sipser exercise 1.6.</em>)</p>
<p>Give DFAs/NFAs and regular expressions for each of the following languages. In all cases, <span class="math inline">\(\Sigma = \{ 0, 1 \}\)</span>.</p>
<ul>
<li><span class="math inline">\(L_1 = \{\, w \mid \text{$w$ does not contain $01$ or $101$} \,\}\)</span>.</li>
<li><span class="math inline">\(L_2 = \{\, w \mid \text{$w$ starts with $0$ and has odd length or starts with $1$ and has even length} \,\}\)</span>.</li>
</ul>
:ET