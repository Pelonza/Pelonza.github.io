I"ZG<p>Recall in our discussion of DFA equivalence, we were concerned with collapsing pairs of indistinguishable states. The canonical example of this were states of the following form:</p>
<figure>
<img src="/csc341/img/myhill-nerode-theorem-01.png" alt="A simple automata with redundancy." /><figcaption aria-hidden="true">A simple automata with redundancy.</figcaption>
</figure>
<p>Assuming that <span class="math inline">\(\Sigma = \{ 0, 1 \}\)</span>, we see that <span class="math inline">\(q_0\)</span> and <span class="math inline">\(q_1\)</span> go to the same state on every input If we arrive at either <span class="math inline">\(q_0\)</span> or <span class="math inline">\(q_1\)</span>, our machine will accept and reject the same set of strings according to whatever transitions follow from <span class="math inline">\(q_2\)</span> Therefore, it is safe to collapse these two states into one:</p>
<figure>
<img src="/csc341/img/myhill-nerode-theorem-02.png" alt="The previous automata without redundancy." /><figcaption aria-hidden="true">The previous automata without redundancy.</figcaption>
</figure>
<p>Let’s formalize this notion of indistinguishableness By doing this, we will arrive at the <em>Myhill-Nerode theorem</em>, a result that describes a fundamental property of regular languages We can use this result to justify our equivalence algorithm as well as show that a language is regular or non-regular</p>
<h1 id="distinguishing-extensions-and-equivalences">Distinguishing Extensions and Equivalences</h1>
<p>Consider the following DFA slightly modified from our original example.</p>
<figure>
<img src="/csc341/img/myhill-nerode-theorem-03.png" alt="A more complicated version of the original simple automata." /><figcaption aria-hidden="true">A more complicated version of the original simple automata.</figcaption>
</figure>
<p>Imagine two separate executions of this DFA To get to <span class="math inline">\(q_0\)</span> in the first execution and <span class="math inline">\(q_1\)</span> in the second execution, we would need to first read in some strings <span class="math inline">\(x \in \Sigma^*\)</span> and <span class="math inline">\(y \in \Sigma^*\)</span>, respectively</p>
<p>Now, imagine the additional transitions that result from reading in an additional character in both of these executions If in both executions we read a <span class="math inline">\(0\)</span>, then we are in the situation where we converge on the same state Both executions will have the behavior at this point—rejection, since they are now both stuck in <span class="math inline">\(q_2\)</span> In contrast, if we read a <span class="math inline">\(1\)</span>, then we are in the situation where the first execution (originally in <span class="math inline">\(q_0\)</span>) will always accept by moving to <span class="math inline">\(q_3\)</span> whereas the second execution (originally in <span class="math inline">\(q_1\)</span>) will always reject by moving to <span class="math inline">\(q_4\)</span></p>
<p>Here, the additional character <span class="math inline">\(0\)</span> or <span class="math inline">\(1\)</span> that is read is called an <em>extension</em> of the strings <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> <span class="math inline">\(1\)</span> is called a <em>distinguishing</em> extension to the strings <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> with respect to the DFA: by reading in a <span class="math inline">\(1\)</span>, the behavior of the executions starting in <span class="math inline">\(q_0\)</span> and <span class="math inline">\(q_1\)</span> differ In contrast, <span class="math inline">\(0\)</span> is a <em>nondistinguishing</em> extension to <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> because in both executions, we would accept</p>
<p>We can generalize this notion of distinguishability to arbitrary strings <span class="math inline">\(z \in \Sigma^*\)</span>, rather than single characters as follows:</p>
<div class="definition">
<p><strong>Definition (Distinguishing Extension)</strong>. <em>Consider a language <span class="math inline">\(L \subseteq \Sigma^*\)</span> and strings <span class="math inline">\(x, y \in \Sigma^*\)</span>. A string <span class="math inline">\(z \in \Sigma^*\)</span> is a </em>distinguishing extension* of the strings <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> if exactly one of <span class="math inline">\(xz\)</span> and <span class="math inline">\(yz\)</span> are in <span class="math inline">\(L\)</span>.*</p>
</div>
<div class="definition">
<p><strong>Definition (Indistinguishable)</strong>. <em>Consider a language <span class="math inline">\(L \subseteq \Sigma^*\)</span> and strings <span class="math inline">\(x, y \in \Sigma^*\)</span>. Two strings <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> are </em>indistinguishable<em>, written <span class="math inline">\(x \equiv_L y\)</span> if there does not exist a <span class="math inline">\(z \in \Sigma^*\)</span> that is a distinguishing extension of <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> with respect to <span class="math inline">\(L\)</span>.</em></p>
</div>
<p>This relation, <span class="math inline">\(\equiv_L\)</span>, forms an <em>equivalence relation</em> between strings in <span class="math inline">\(\Sigma^*\)</span>. Recall that an equivalence is a particular relation satisfying three properties:</p>
<ol type="1">
<li>Reflexivity (<span class="math inline">\(x \equiv_L x\)</span>).</li>
<li>Symmetry (<span class="math inline">\(x \equiv_L y \Rightarrow y \equiv_L x\)</span>).</li>
<li>Transitivity (<span class="math inline">\(x \equiv_L y \wedge y \equiv_L z \Rightarrow x \equiv_L z\)</span>).</li>
</ol>
<p>Clearly the first two properties hold—identical strings have the same behavior with respect to extension and the relation does not favor its left- or right-hand sides. To see that the third property holds, consider some extension <span class="math inline">\(w \in \Sigma^*\)</span> to <span class="math inline">\(x\)</span>, <span class="math inline">\(y\)</span>, and <span class="math inline">\(z\)</span>. By our premises, we know that <span class="math inline">\(xw\)</span> and <span class="math inline">\(yw\)</span> have the same accept/reject behavior and <span class="math inline">\(yw\)</span> and <span class="math inline">\(zw\)</span> have the same accept/reject behavior. To conclude that <span class="math inline">\(xw\)</span> and <span class="math inline">\(zw\)</span> have the same behavior, we note that they must both have the same behavior as <span class="math inline">\(yw\)</span>.</p>
<h1 id="the-myhill-nerode-theorem">The Myhill-Nerode Theorem</h1>
<p>With an equivalence relation, we can form <em>equivalence classes</em> between the members it relates. Recall that an equivalence class is a set of elements closed under the equivalence relation. That is, we establish that two elements are equivalent, <span class="math inline">\(x \equiv_L y\)</span>, and then use the properties of the equivalence relation to find additional equivalent elements until there are no more to add to the set.</p>
<p>The Myhill-Nerode theorem characterizes the regular languages in terms of the equivalence classes generated by <span class="math inline">\(\equiv_L\)</span>.</p>
<div class="proof">
<p><strong>Theorem (Myhill-Nerode)</strong>. <em>A language <span class="math inline">\(L\)</span> is regular if and only if <span class="math inline">\(\equiv_L\)</span> has a finite number of equivalence classes. Furthermore, the number of equivalence classes corresponds to the number of states in the minimal DFA that recognizes <span class="math inline">\(L\)</span>.</em></p>
<p><em>Proof.</em> In the “if” direction, we have a regular language <span class="math inline">\(L\)</span> and from it must deduce that <span class="math inline">\(\equiv_L\)</span> has a finite number of equivalence classes. Consider a DFA <span class="math inline">\(D = (\Sigma, Q, \delta, q_0, F)\)</span> that recognizes <span class="math inline">\(L\)</span>. Define the following family of sets of strings for each <span class="math inline">\(q_i \in Q\)</span>:</p>
<p><span class="math display">\[
W_i = \{ w \in \Sigma^* \;|\; q_i \in Q, \delta^*(q_0, w) = q_i \}.
\]</span></p>
<p>That is <span class="math inline">\(W_i\)</span> is the set of strings that cause <span class="math inline">\(D\)</span> to transition from <span class="math inline">\(q_0\)</span> to <span class="math inline">\(q_i\)</span>. Note that every string belongs to exactly one of these <span class="math inline">\(W_i\)</span>, <em>i.e.</em>, each <span class="math inline">\(w \in \Sigma^*\)</span> sends <span class="math inline">\(D\)</span> to a single <span class="math inline">\(q_i\)</span> by the definition of the transition function <span class="math inline">\(\delta\)</span>.</p>
<p>Now, consider an arbitrary <span class="math inline">\(q_i \in Q\)</span>, its related <span class="math inline">\(W_i\)</span>, and any two <span class="math inline">\(x, y \in W_i\)</span>. Since <span class="math inline">\(\delta^*(x, q_0) = \delta^*(y, q_0) = q_i\)</span> (<span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> arrive at the same state <span class="math inline">\(q_i\)</span> in <span class="math inline">\(D\)</span>), then we know there is no distinguishing extension <span class="math inline">\(z \in \Sigma^*\)</span> for the strings <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span>. Therefore, <span class="math inline">\(x \equiv_L y\)</span> and we can therefore conclude that <span class="math inline">\(W_i\)</span> is a subset of some equivalence class of <span class="math inline">\(\equiv_L\)</span>. From this and the fact that every possible string belongs to exactly one of these sets, we know that the size of the family of sets <span class="math inline">\(W_i\)</span>, <em>i.e.</em>, <span class="math inline">\(|Q|\)</span>, is an upper bound on the total number of equivalence classes of <span class="math inline">\(\equiv_L\)</span>. Because <span class="math inline">\(|Q|\)</span> has finite size, we can finally conclude that the number of equivalence classes is finite. (Note that we are unable to conclude that each <span class="math inline">\(W_i\)</span> is <em>equal</em> to some equivalence class of <span class="math inline">\(\equiv_L\)</span>, rather than a subset, because multiple <span class="math inline">\(W_i\)</span> might map onto the same equivalence class.)</p>
<p>In the “only if” direction, we know that <span class="math inline">\(\equiv_L\)</span> has a finite number of equivalence classes and from there must deduce that <span class="math inline">\(L\)</span> is regular. To do this, we construct a DFA <span class="math inline">\(D = (\Sigma, Q, \delta, q_0, F)\)</span> from <span class="math inline">\(\equiv_L\)</span> where <span class="math inline">\(L(D) = L\)</span>. Let <span class="math inline">\(W_i\)</span> denote the <span class="math inline">\(i\)</span>th equivalence class of <span class="math inline">\(\equiv_L\)</span>.</p>
<ul>
<li><span class="math inline">\(Q = \{ q_i \;|\; W_i \subseteq \Sigma^* \}\)</span>.</li>
<li><span class="math inline">\(\delta(q_i, a) = q_j\)</span> where <span class="math inline">\(W_i\)</span> corresponds to the equivalence class for the string <span class="math inline">\(x \in W_i\)</span>, and <span class="math inline">\(W_j\)</span> corresponds to the equivalence class for the string <span class="math inline">\(xa\)</span>. Note that it doesn’t matter which <span class="math inline">\(x\)</span> is chosen; by the definition of <span class="math inline">\(\equiv_L\)</span>, any extension of <span class="math inline">\(x, y \in W_i\)</span> has the same behavior, so choosing either <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> results in <span class="math inline">\(W_j\)</span></li>
<li><span class="math inline">\(q_0 = q_i\)</span> where <span class="math inline">\(\epsilon \in W_i\)</span>, <em>i.e.</em>, we start in the equivalence class that contains the empty string.</li>
<li><span class="math inline">\(F = \{ q_i \;|\; w \in W_i \wedge w \in L \}\)</span>.</li>
</ul>
<p>Finally, note that in the “if” direction, we showed the sets of strings derived from a DFA by considering distinguishing extensions is a subset of an equivalence class in <span class="math inline">\(\equiv_L\)</span>. Furthermore, there may be more such sets than there are equivalence classes. The “only if” direction shows that we can directly derive a DFA from the equivalence classes of <span class="math inline">\(\equiv_L\)</span>. From these facts, we can conclude that the DFA derived from the equivalence classes of <span class="math inline">\(\equiv_L\)</span> is the <em>minimal</em> DFA for the language <span class="math inline">\(L\)</span>.</p>
<div class="qed">
□
</div>
</div>
<h1 id="applications">Applications</h1>
<p>The Myhill-Nerode theorem establishes a direct correspondence between the equivalence classes of <span class="math inline">\(\equiv_L\)</span> and the states of the (minimal) DFA that recognizes <span class="math inline">\(L\)</span>. As an immediate corollary, the table-filling algorithm for minimization that we discussed in the previous reading computes the equivalence classes of <span class="math inline">\(\equiv_L\)</span> and therefore, is minimal.</p>
<p>In addition to this, we can use the Myhill-Nerode theorem to establish whether a language <span class="math inline">\(L\)</span> is regular. To do this, we either construct the finite equivalence classes of <span class="math inline">\(\equiv_L\)</span> (to show regularity) or show that the equivalence classes of <span class="math inline">\(\equiv_L\)</span> is infinite (to show non-regularity).</p>
<div class="proof">
<p><strong>Claim 1</strong>. Consider the language <span class="math inline">\(L = \{ w \;|\; \text{$w$ contains an even number of $0$s} \}\)</span>. <span class="math inline">\(L\)</span> is regular.</p>
<p><em>Proof.</em> Rather than building a DFA, we can show this directly using the Myhill-Nerode theorem. We enumerate possible strings, using distinguishing extensions to group them into equivalence classes:</p>
<ol type="1">
<li><p>The strings <span class="math inline">\(\epsilon, 1, 00, 010, \ldots\)</span>: these strings have the same acceptance/rejection behavior on all possible extensions, <em>e.g.</em>, <span class="math inline">\(\epsilon\)</span> (accept), <span class="math inline">\(0\)</span> (reject), <span class="math inline">\(1\)</span> (accept), …</p></li>
<li><p>The strings <span class="math inline">\(0, 01, 10, 110, \ldots\)</span>: these strings have the same acceptance/rejection behavior on all possible extensions, <em>e.g.</em>, <span class="math inline">\(\epsilon\)</span> (reject), <span class="math inline">\(0\)</span> (accept), <span class="math inline">\(1\)</span> (reject), …</p></li>
</ol>
<p>Formally, we define two sets of strings:</p>
<ul>
<li><span class="math inline">\(W_1 = \{ w \mid \text{$w$ has an even number of $0$s} \}\)</span>.</li>
<li><span class="math inline">\(W_2 = \{ w \mid \text{$w$ has an odd number of $0$s} \}\)</span>.</li>
</ul>
<p>These two sets are complete—they encompass all strings in <span class="math inline">\(\Sigma^*\)</span>. Furthermore, any <span class="math inline">\(w \in \Sigma^*\)</span> is in exactly one of <span class="math inline">\(W_1\)</span> and <span class="math inline">\(W_2\)</span>. Finally, each set is an equivalence class of <span class="math inline">\(\equiv_L\)</span>—any extension of pairs of strings in one of the <span class="math inline">\(W_i\)</span> result in identical acceptance/rejection behavior with respect to <span class="math inline">\(L\)</span>. Thus, we can conclude <span class="math inline">\(W_1\)</span> and <span class="math inline">\(W_2\)</span> are the equivalence classes of <span class="math inline">\(\equiv_L\)</span> and thus <span class="math inline">\(L\)</span> is regular.</p>
<div class="qed">
□
</div>
</div>
<p>Note that these two classes correspond to the following minimal DFA:</p>
<figure>
<img src="/csc341/img/myhill-nerode-theorem-04.png" alt="A minimal DFA for L." /><figcaption aria-hidden="true">A minimal DFA for <span class="math inline">\(L\)</span>.</figcaption>
</figure>
<p>Which we recognize as the correct DFA for <span class="math inline">\(L\)</span>.</p>
<p>Rather than using the pumping lemma, we can also use the Myhill-Nerode theorem to show that <span class="math inline">\(L\)</span> is regular. Suppose that <span class="math inline">\(L\)</span> is regular, then the theorem says that <span class="math inline">\(\equiv_L\)</span> has a finite number of equivalence classes. Therefore, we show that <span class="math inline">\(\equiv_L\)</span> actually has an infinite number of equivalence classes, a <em>proof by contradiction</em>.</p>
<div class="proof">
<p><strong>Claim 2</strong>. <em>Consider the language <span class="math inline">\(L = \{ 0^n1^n \;|\; n \geq 0 \}\)</span>. <span class="math inline">\(L\)</span> is not regular.</em></p>
<p><em>Proof.</em> Consider the string <span class="math inline">\(0^n\)</span> for <span class="math inline">\(n \geq 0\)</span>. For each such string, there is a single extension in which <span class="math inline">\(L\)</span> contains the resulting string—<span class="math inline">\(1^n\)</span>—and all other extensions result in strings not in <span class="math inline">\(L\)</span>. Therefore <span class="math inline">\(\equiv_L\)</span> contains one equivalence class for each <span class="math inline">\(n \geq 0\)</span> corresponding to the starting string <span class="math inline">\(0^n\)</span>. This is an infinite number of such classes. Therefore <span class="math inline">\(L\)</span> must not be regular.</p>
<div class="qed">
□
</div>
</div>
:ET