I"Ó	<h1 id="problem-1-chicken-and-rice">Problem 1: Chicken and Rice</h1>
<ol type="a">
<li><p>Use Riceâ€™s Theorem to show the following language is undecidable:</p>
<p><span class="math display">\[
L_1 = \{\, M \mid \text{\( M \) is a TM and \( 010 \in L(M) \)} \,\}.
\]</span></p></li>
<li><p>Is the following language undecidable according to Riceâ€™s Theorem? Explain in a sentence or two.</p>
<p><span class="math display">\[
L_2 = \{\, M \mid \text{\( M \) is a TM and on some input, \( 010 \) exists on the tape at some point} \,\}.
\]</span></p></li>
</ol>
<h1 id="problem-2-scheme-is-real-right">Problem 2: Scheme Is Real, Right?</h1>
<ol type="a">
<li><p>Consider the problem of determining whether the branches of an arbitrary if-expression in Schemeâ€”â€”produces only one type of value (<em>e.g.</em>, only integers or strings). For example, this property is true of <code>(if b 0 1)</code> for any expression <code>b</code> but false for <code>(if b 5 #t)</code>. Formulate this problem as a language and show that this problem is undecidable. You may assume the existence of a Scheme function <code>run-tm</code> that takes a Turing machine description <span class="math inline">\(M\)</span> and input <span class="math inline">\(w\)</span> and returns <code>#t</code> if <span class="math inline">\(M\)</span> accepts <span class="math inline">\(w\)</span> and <code>#f</code> if <span class="math inline">\(M\)</span> rejects <span class="math inline">\(w\)</span>.</p></li>
<li><p>Now consider the fact that a computer program on a 64-bit machine runs with <span class="math inline">\(2^{64}\)</span> bits of memory. Show that the halting problem for such computer programs is decidable. Make sure to argue the (a) correctness and (b) termination of your algorithm.</p>
<p>(<em>Hint</em>: consider the decidability proof of <span class="math inline">\(A_{\mathsf{LBA}}\)</span>.)</p></li>
<li><p>The answers to the two previous parts seem to be at odds. In a few sentences, describe the critical difference between the two cases that makes the first part undecidable but the second part decidable.</p></li>
<li><p>Finally with all this in mind, it seems like that undecidability is merely a theoretical device. However, it does have important practical implications! In a few sentences, describe these practical implicationsâ€”if we feel the need to solve some variant of the halting problem for a computational device, what must we keep in mind and how should we approach the problem?</p></li>
</ol>
:ET